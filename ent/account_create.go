// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/account"
	"rei.io/rei/ent/schema"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSequenceID sets the "SequenceID" field.
func (ac *AccountCreate) SetSequenceID(u uint64) *AccountCreate {
	ac.mutation.SetSequenceID(u)
	return ac
}

// SetAccountID sets the "AccountID" field.
func (ac *AccountCreate) SetAccountID(s string) *AccountCreate {
	ac.mutation.SetAccountID(s)
	return ac
}

// SetBalance sets the "Balance" field.
func (ac *AccountCreate) SetBalance(u uint64) *AccountCreate {
	ac.mutation.SetBalance(u)
	return ac
}

// SetObjects sets the "Objects" field.
func (ac *AccountCreate) SetObjects(so []schema.AccObject) *AccountCreate {
	ac.mutation.SetObjects(so)
	return ac
}

// SetTransactions sets the "Transactions" field.
func (ac *AccountCreate) SetTransactions(s []string) *AccountCreate {
	ac.mutation.SetTransactions(s)
	return ac
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Account)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.SequenceID(); !ok {
		return &ValidationError{Name: "SequenceID", err: errors.New(`ent: missing required field "Account.SequenceID"`)}
	}
	if _, ok := ac.mutation.AccountID(); !ok {
		return &ValidationError{Name: "AccountID", err: errors.New(`ent: missing required field "Account.AccountID"`)}
	}
	if _, ok := ac.mutation.Balance(); !ok {
		return &ValidationError{Name: "Balance", err: errors.New(`ent: missing required field "Account.Balance"`)}
	}
	if _, ok := ac.mutation.Objects(); !ok {
		return &ValidationError{Name: "Objects", err: errors.New(`ent: missing required field "Account.Objects"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: account.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.SequenceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: account.FieldSequenceID,
		})
		_node.SequenceID = value
	}
	if value, ok := ac.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := ac.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: account.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := ac.mutation.Objects(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: account.FieldObjects,
		})
		_node.Objects = value
	}
	if value, ok := ac.mutation.Transactions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: account.FieldTransactions,
		})
		_node.Transactions = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.Create().
//		SetSequenceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetSequenceID(v+v).
//		}).
//		Exec(ctx)
func (ac *AccountCreate) OnConflict(opts ...sql.ConflictOption) *AccountUpsertOne {
	ac.conflict = opts
	return &AccountUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AccountCreate) OnConflictColumns(columns ...string) *AccountUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertOne{
		create: ac,
	}
}

type (
	// AccountUpsertOne is the builder for "upsert"-ing
	//  one Account node.
	AccountUpsertOne struct {
		create *AccountCreate
	}

	// AccountUpsert is the "OnConflict" setter.
	AccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetSequenceID sets the "SequenceID" field.
func (u *AccountUpsert) SetSequenceID(v uint64) *AccountUpsert {
	u.Set(account.FieldSequenceID, v)
	return u
}

// UpdateSequenceID sets the "SequenceID" field to the value that was provided on create.
func (u *AccountUpsert) UpdateSequenceID() *AccountUpsert {
	u.SetExcluded(account.FieldSequenceID)
	return u
}

// AddSequenceID adds v to the "SequenceID" field.
func (u *AccountUpsert) AddSequenceID(v uint64) *AccountUpsert {
	u.Add(account.FieldSequenceID, v)
	return u
}

// SetAccountID sets the "AccountID" field.
func (u *AccountUpsert) SetAccountID(v string) *AccountUpsert {
	u.Set(account.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "AccountID" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAccountID() *AccountUpsert {
	u.SetExcluded(account.FieldAccountID)
	return u
}

// SetBalance sets the "Balance" field.
func (u *AccountUpsert) SetBalance(v uint64) *AccountUpsert {
	u.Set(account.FieldBalance, v)
	return u
}

// UpdateBalance sets the "Balance" field to the value that was provided on create.
func (u *AccountUpsert) UpdateBalance() *AccountUpsert {
	u.SetExcluded(account.FieldBalance)
	return u
}

// AddBalance adds v to the "Balance" field.
func (u *AccountUpsert) AddBalance(v uint64) *AccountUpsert {
	u.Add(account.FieldBalance, v)
	return u
}

// SetObjects sets the "Objects" field.
func (u *AccountUpsert) SetObjects(v []schema.AccObject) *AccountUpsert {
	u.Set(account.FieldObjects, v)
	return u
}

// UpdateObjects sets the "Objects" field to the value that was provided on create.
func (u *AccountUpsert) UpdateObjects() *AccountUpsert {
	u.SetExcluded(account.FieldObjects)
	return u
}

// SetTransactions sets the "Transactions" field.
func (u *AccountUpsert) SetTransactions(v []string) *AccountUpsert {
	u.Set(account.FieldTransactions, v)
	return u
}

// UpdateTransactions sets the "Transactions" field to the value that was provided on create.
func (u *AccountUpsert) UpdateTransactions() *AccountUpsert {
	u.SetExcluded(account.FieldTransactions)
	return u
}

// ClearTransactions clears the value of the "Transactions" field.
func (u *AccountUpsert) ClearTransactions() *AccountUpsert {
	u.SetNull(account.FieldTransactions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccountUpsertOne) UpdateNewValues() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccountUpsertOne) Ignore() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertOne) DoNothing() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreate.OnConflict
// documentation for more info.
func (u *AccountUpsertOne) Update(set func(*AccountUpsert)) *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetSequenceID sets the "SequenceID" field.
func (u *AccountUpsertOne) SetSequenceID(v uint64) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetSequenceID(v)
	})
}

// AddSequenceID adds v to the "SequenceID" field.
func (u *AccountUpsertOne) AddSequenceID(v uint64) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddSequenceID(v)
	})
}

// UpdateSequenceID sets the "SequenceID" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateSequenceID() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateSequenceID()
	})
}

// SetAccountID sets the "AccountID" field.
func (u *AccountUpsertOne) SetAccountID(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "AccountID" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAccountID() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAccountID()
	})
}

// SetBalance sets the "Balance" field.
func (u *AccountUpsertOne) SetBalance(v uint64) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "Balance" field.
func (u *AccountUpsertOne) AddBalance(v uint64) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "Balance" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateBalance() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBalance()
	})
}

// SetObjects sets the "Objects" field.
func (u *AccountUpsertOne) SetObjects(v []schema.AccObject) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetObjects(v)
	})
}

// UpdateObjects sets the "Objects" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateObjects() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateObjects()
	})
}

// SetTransactions sets the "Transactions" field.
func (u *AccountUpsertOne) SetTransactions(v []string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetTransactions(v)
	})
}

// UpdateTransactions sets the "Transactions" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateTransactions() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTransactions()
	})
}

// ClearTransactions clears the value of the "Transactions" field.
func (u *AccountUpsertOne) ClearTransactions() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearTransactions()
	})
}

// Exec executes the query.
func (u *AccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	builders []*AccountCreate
	conflict []sql.ConflictOption
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetSequenceID(v+v).
//		}).
//		Exec(ctx)
func (acb *AccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountUpsertBulk {
	acb.conflict = opts
	return &AccountUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AccountCreateBulk) OnConflictColumns(columns ...string) *AccountUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertBulk{
		create: acb,
	}
}

// AccountUpsertBulk is the builder for "upsert"-ing
// a bulk of Account nodes.
type AccountUpsertBulk struct {
	create *AccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccountUpsertBulk) UpdateNewValues() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccountUpsertBulk) Ignore() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertBulk) DoNothing() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreateBulk.OnConflict
// documentation for more info.
func (u *AccountUpsertBulk) Update(set func(*AccountUpsert)) *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetSequenceID sets the "SequenceID" field.
func (u *AccountUpsertBulk) SetSequenceID(v uint64) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetSequenceID(v)
	})
}

// AddSequenceID adds v to the "SequenceID" field.
func (u *AccountUpsertBulk) AddSequenceID(v uint64) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddSequenceID(v)
	})
}

// UpdateSequenceID sets the "SequenceID" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateSequenceID() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateSequenceID()
	})
}

// SetAccountID sets the "AccountID" field.
func (u *AccountUpsertBulk) SetAccountID(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "AccountID" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAccountID() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAccountID()
	})
}

// SetBalance sets the "Balance" field.
func (u *AccountUpsertBulk) SetBalance(v uint64) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "Balance" field.
func (u *AccountUpsertBulk) AddBalance(v uint64) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "Balance" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateBalance() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBalance()
	})
}

// SetObjects sets the "Objects" field.
func (u *AccountUpsertBulk) SetObjects(v []schema.AccObject) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetObjects(v)
	})
}

// UpdateObjects sets the "Objects" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateObjects() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateObjects()
	})
}

// SetTransactions sets the "Transactions" field.
func (u *AccountUpsertBulk) SetTransactions(v []string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetTransactions(v)
	})
}

// UpdateTransactions sets the "Transactions" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateTransactions() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateTransactions()
	})
}

// ClearTransactions clears the value of the "Transactions" field.
func (u *AccountUpsertBulk) ClearTransactions() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearTransactions()
	})
}

// Exec executes the query.
func (u *AccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
