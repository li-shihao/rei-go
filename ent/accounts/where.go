// Code generated by ent, DO NOT EDIT.

package accounts

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AccountID applies equality check predicate on the "AccountID" field. It's identical to AccountIDEQ.
func AccountID(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// Balance applies equality check predicate on the "Balance" field. It's identical to BalanceEQ.
func Balance(v uint64) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Time applies equality check predicate on the "Time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "AccountID" field.
func AccountIDEQ(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "AccountID" field.
func AccountIDNEQ(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "AccountID" field.
func AccountIDIn(vs ...string) predicate.Accounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "AccountID" field.
func AccountIDNotIn(vs ...string) predicate.Accounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "AccountID" field.
func AccountIDGT(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "AccountID" field.
func AccountIDGTE(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "AccountID" field.
func AccountIDLT(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "AccountID" field.
func AccountIDLTE(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDContains applies the Contains predicate on the "AccountID" field.
func AccountIDContains(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountID), v))
	})
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "AccountID" field.
func AccountIDHasPrefix(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountID), v))
	})
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "AccountID" field.
func AccountIDHasSuffix(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountID), v))
	})
}

// AccountIDEqualFold applies the EqualFold predicate on the "AccountID" field.
func AccountIDEqualFold(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountID), v))
	})
}

// AccountIDContainsFold applies the ContainsFold predicate on the "AccountID" field.
func AccountIDContainsFold(v string) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountID), v))
	})
}

// BalanceEQ applies the EQ predicate on the "Balance" field.
func BalanceEQ(v uint64) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "Balance" field.
func BalanceNEQ(v uint64) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "Balance" field.
func BalanceIn(vs ...uint64) predicate.Accounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "Balance" field.
func BalanceNotIn(vs ...uint64) predicate.Accounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "Balance" field.
func BalanceGT(v uint64) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "Balance" field.
func BalanceGTE(v uint64) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "Balance" field.
func BalanceLT(v uint64) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "Balance" field.
func BalanceLTE(v uint64) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// TimeEQ applies the EQ predicate on the "Time" field.
func TimeEQ(v time.Time) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "Time" field.
func TimeNEQ(v time.Time) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "Time" field.
func TimeIn(vs ...time.Time) predicate.Accounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "Time" field.
func TimeNotIn(vs ...time.Time) predicate.Accounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "Time" field.
func TimeGT(v time.Time) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "Time" field.
func TimeGTE(v time.Time) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "Time" field.
func TimeLT(v time.Time) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "Time" field.
func TimeLTE(v time.Time) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Accounts) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Accounts) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Accounts) predicate.Accounts {
	return predicate.Accounts(func(s *sql.Selector) {
		p(s.Not())
	})
}
