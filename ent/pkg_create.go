// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/pkg"
)

// PkgCreate is the builder for creating a Pkg entity.
type PkgCreate struct {
	config
	mutation *PkgMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTransactionID sets the "TransactionID" field.
func (pc *PkgCreate) SetTransactionID(s string) *PkgCreate {
	pc.mutation.SetTransactionID(s)
	return pc
}

// SetObjectID sets the "ObjectID" field.
func (pc *PkgCreate) SetObjectID(s string) *PkgCreate {
	pc.mutation.SetObjectID(s)
	return pc
}

// SetBytecode sets the "Bytecode" field.
func (pc *PkgCreate) SetBytecode(m map[string]interface{}) *PkgCreate {
	pc.mutation.SetBytecode(m)
	return pc
}

// Mutation returns the PkgMutation object of the builder.
func (pc *PkgCreate) Mutation() *PkgMutation {
	return pc.mutation
}

// Save creates the Pkg in the database.
func (pc *PkgCreate) Save(ctx context.Context) (*Pkg, error) {
	var (
		err  error
		node *Pkg
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PkgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Pkg)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PkgMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PkgCreate) SaveX(ctx context.Context) *Pkg {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PkgCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PkgCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PkgCreate) check() error {
	if _, ok := pc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "TransactionID", err: errors.New(`ent: missing required field "Pkg.TransactionID"`)}
	}
	if _, ok := pc.mutation.ObjectID(); !ok {
		return &ValidationError{Name: "ObjectID", err: errors.New(`ent: missing required field "Pkg.ObjectID"`)}
	}
	if _, ok := pc.mutation.Bytecode(); !ok {
		return &ValidationError{Name: "Bytecode", err: errors.New(`ent: missing required field "Pkg.Bytecode"`)}
	}
	return nil
}

func (pc *PkgCreate) sqlSave(ctx context.Context) (*Pkg, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PkgCreate) createSpec() (*Pkg, *sqlgraph.CreateSpec) {
	var (
		_node = &Pkg{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pkg.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pkg.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pkg.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := pc.mutation.ObjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pkg.FieldObjectID,
		})
		_node.ObjectID = value
	}
	if value, ok := pc.mutation.Bytecode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: pkg.FieldBytecode,
		})
		_node.Bytecode = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pkg.Create().
//		SetTransactionID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PkgUpsert) {
//			SetTransactionID(v+v).
//		}).
//		Exec(ctx)
func (pc *PkgCreate) OnConflict(opts ...sql.ConflictOption) *PkgUpsertOne {
	pc.conflict = opts
	return &PkgUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pkg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PkgCreate) OnConflictColumns(columns ...string) *PkgUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PkgUpsertOne{
		create: pc,
	}
}

type (
	// PkgUpsertOne is the builder for "upsert"-ing
	//  one Pkg node.
	PkgUpsertOne struct {
		create *PkgCreate
	}

	// PkgUpsert is the "OnConflict" setter.
	PkgUpsert struct {
		*sql.UpdateSet
	}
)

// SetTransactionID sets the "TransactionID" field.
func (u *PkgUpsert) SetTransactionID(v string) *PkgUpsert {
	u.Set(pkg.FieldTransactionID, v)
	return u
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *PkgUpsert) UpdateTransactionID() *PkgUpsert {
	u.SetExcluded(pkg.FieldTransactionID)
	return u
}

// SetObjectID sets the "ObjectID" field.
func (u *PkgUpsert) SetObjectID(v string) *PkgUpsert {
	u.Set(pkg.FieldObjectID, v)
	return u
}

// UpdateObjectID sets the "ObjectID" field to the value that was provided on create.
func (u *PkgUpsert) UpdateObjectID() *PkgUpsert {
	u.SetExcluded(pkg.FieldObjectID)
	return u
}

// SetBytecode sets the "Bytecode" field.
func (u *PkgUpsert) SetBytecode(v map[string]interface{}) *PkgUpsert {
	u.Set(pkg.FieldBytecode, v)
	return u
}

// UpdateBytecode sets the "Bytecode" field to the value that was provided on create.
func (u *PkgUpsert) UpdateBytecode() *PkgUpsert {
	u.SetExcluded(pkg.FieldBytecode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Pkg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PkgUpsertOne) UpdateNewValues() *PkgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pkg.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PkgUpsertOne) Ignore() *PkgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PkgUpsertOne) DoNothing() *PkgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PkgCreate.OnConflict
// documentation for more info.
func (u *PkgUpsertOne) Update(set func(*PkgUpsert)) *PkgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PkgUpsert{UpdateSet: update})
	}))
	return u
}

// SetTransactionID sets the "TransactionID" field.
func (u *PkgUpsertOne) SetTransactionID(v string) *PkgUpsertOne {
	return u.Update(func(s *PkgUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *PkgUpsertOne) UpdateTransactionID() *PkgUpsertOne {
	return u.Update(func(s *PkgUpsert) {
		s.UpdateTransactionID()
	})
}

// SetObjectID sets the "ObjectID" field.
func (u *PkgUpsertOne) SetObjectID(v string) *PkgUpsertOne {
	return u.Update(func(s *PkgUpsert) {
		s.SetObjectID(v)
	})
}

// UpdateObjectID sets the "ObjectID" field to the value that was provided on create.
func (u *PkgUpsertOne) UpdateObjectID() *PkgUpsertOne {
	return u.Update(func(s *PkgUpsert) {
		s.UpdateObjectID()
	})
}

// SetBytecode sets the "Bytecode" field.
func (u *PkgUpsertOne) SetBytecode(v map[string]interface{}) *PkgUpsertOne {
	return u.Update(func(s *PkgUpsert) {
		s.SetBytecode(v)
	})
}

// UpdateBytecode sets the "Bytecode" field to the value that was provided on create.
func (u *PkgUpsertOne) UpdateBytecode() *PkgUpsertOne {
	return u.Update(func(s *PkgUpsert) {
		s.UpdateBytecode()
	})
}

// Exec executes the query.
func (u *PkgUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PkgCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PkgUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PkgUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PkgUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PkgCreateBulk is the builder for creating many Pkg entities in bulk.
type PkgCreateBulk struct {
	config
	builders []*PkgCreate
	conflict []sql.ConflictOption
}

// Save creates the Pkg entities in the database.
func (pcb *PkgCreateBulk) Save(ctx context.Context) ([]*Pkg, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pkg, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PkgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PkgCreateBulk) SaveX(ctx context.Context) []*Pkg {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PkgCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PkgCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pkg.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PkgUpsert) {
//			SetTransactionID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PkgCreateBulk) OnConflict(opts ...sql.ConflictOption) *PkgUpsertBulk {
	pcb.conflict = opts
	return &PkgUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pkg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PkgCreateBulk) OnConflictColumns(columns ...string) *PkgUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PkgUpsertBulk{
		create: pcb,
	}
}

// PkgUpsertBulk is the builder for "upsert"-ing
// a bulk of Pkg nodes.
type PkgUpsertBulk struct {
	create *PkgCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pkg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PkgUpsertBulk) UpdateNewValues() *PkgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pkg.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PkgUpsertBulk) Ignore() *PkgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PkgUpsertBulk) DoNothing() *PkgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PkgCreateBulk.OnConflict
// documentation for more info.
func (u *PkgUpsertBulk) Update(set func(*PkgUpsert)) *PkgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PkgUpsert{UpdateSet: update})
	}))
	return u
}

// SetTransactionID sets the "TransactionID" field.
func (u *PkgUpsertBulk) SetTransactionID(v string) *PkgUpsertBulk {
	return u.Update(func(s *PkgUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *PkgUpsertBulk) UpdateTransactionID() *PkgUpsertBulk {
	return u.Update(func(s *PkgUpsert) {
		s.UpdateTransactionID()
	})
}

// SetObjectID sets the "ObjectID" field.
func (u *PkgUpsertBulk) SetObjectID(v string) *PkgUpsertBulk {
	return u.Update(func(s *PkgUpsert) {
		s.SetObjectID(v)
	})
}

// UpdateObjectID sets the "ObjectID" field to the value that was provided on create.
func (u *PkgUpsertBulk) UpdateObjectID() *PkgUpsertBulk {
	return u.Update(func(s *PkgUpsert) {
		s.UpdateObjectID()
	})
}

// SetBytecode sets the "Bytecode" field.
func (u *PkgUpsertBulk) SetBytecode(v map[string]interface{}) *PkgUpsertBulk {
	return u.Update(func(s *PkgUpsert) {
		s.SetBytecode(v)
	})
}

// UpdateBytecode sets the "Bytecode" field to the value that was provided on create.
func (u *PkgUpsertBulk) UpdateBytecode() *PkgUpsertBulk {
	return u.Update(func(s *PkgUpsert) {
		s.UpdateBytecode()
	})
}

// Exec executes the query.
func (u *PkgUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PkgCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PkgCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PkgUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
