// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/events"
)

// Events is the model entity for the Events schema.
type Events struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// Sender holds the value of the "Sender" field.
	Sender string `json:"Sender,omitempty"`
	// Recipient holds the value of the "Recipient" field.
	Recipient string `json:"Recipient,omitempty"`
	// TransactionID holds the value of the "TransactionID" field.
	TransactionID string `json:"TransactionID,omitempty"`
	// ObjectID holds the value of the "ObjectID" field.
	ObjectID string `json:"ObjectID,omitempty"`
	// Version holds the value of the "Version" field.
	Version uint32 `json:"Version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Events) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case events.FieldID, events.FieldVersion:
			values[i] = new(sql.NullInt64)
		case events.FieldType, events.FieldSender, events.FieldRecipient, events.FieldTransactionID, events.FieldObjectID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Events", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Events fields.
func (e *Events) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case events.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case events.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				e.Type = value.String
			}
		case events.FieldSender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Sender", values[i])
			} else if value.Valid {
				e.Sender = value.String
			}
		case events.FieldRecipient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Recipient", values[i])
			} else if value.Valid {
				e.Recipient = value.String
			}
		case events.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionID", values[i])
			} else if value.Valid {
				e.TransactionID = value.String
			}
		case events.FieldObjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ObjectID", values[i])
			} else if value.Valid {
				e.ObjectID = value.String
			}
		case events.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Version", values[i])
			} else if value.Valid {
				e.Version = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Events.
// Note that you need to call Events.Unwrap() before calling this method if this Events
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Events) Update() *EventsUpdateOne {
	return (&EventsClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Events entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Events) Unwrap() *Events {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Events is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Events) String() string {
	var builder strings.Builder
	builder.WriteString("Events(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("Type=")
	builder.WriteString(e.Type)
	builder.WriteString(", ")
	builder.WriteString("Sender=")
	builder.WriteString(e.Sender)
	builder.WriteString(", ")
	builder.WriteString("Recipient=")
	builder.WriteString(e.Recipient)
	builder.WriteString(", ")
	builder.WriteString("TransactionID=")
	builder.WriteString(e.TransactionID)
	builder.WriteString(", ")
	builder.WriteString("ObjectID=")
	builder.WriteString(e.ObjectID)
	builder.WriteString(", ")
	builder.WriteString("Version=")
	builder.WriteString(fmt.Sprintf("%v", e.Version))
	builder.WriteByte(')')
	return builder.String()
}

// EventsSlice is a parsable slice of Events.
type EventsSlice []*Events

func (e EventsSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
