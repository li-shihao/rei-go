// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/argument"
)

// ArgumentCreate is the builder for creating a Argument entity.
type ArgumentCreate struct {
	config
	mutation *ArgumentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "Name" field.
func (ac *ArgumentCreate) SetName(s string) *ArgumentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetType sets the "Type" field.
func (ac *ArgumentCreate) SetType(s string) *ArgumentCreate {
	ac.mutation.SetType(s)
	return ac
}

// SetTransactionID sets the "TransactionID" field.
func (ac *ArgumentCreate) SetTransactionID(s string) *ArgumentCreate {
	ac.mutation.SetTransactionID(s)
	return ac
}

// SetData sets the "Data" field.
func (ac *ArgumentCreate) SetData(s string) *ArgumentCreate {
	ac.mutation.SetData(s)
	return ac
}

// Mutation returns the ArgumentMutation object of the builder.
func (ac *ArgumentCreate) Mutation() *ArgumentMutation {
	return ac.mutation
}

// Save creates the Argument in the database.
func (ac *ArgumentCreate) Save(ctx context.Context) (*Argument, error) {
	var (
		err  error
		node *Argument
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArgumentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Argument)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArgumentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArgumentCreate) SaveX(ctx context.Context) *Argument {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArgumentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArgumentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArgumentCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Argument.Name"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New(`ent: missing required field "Argument.Type"`)}
	}
	if _, ok := ac.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "TransactionID", err: errors.New(`ent: missing required field "Argument.TransactionID"`)}
	}
	if _, ok := ac.mutation.Data(); !ok {
		return &ValidationError{Name: "Data", err: errors.New(`ent: missing required field "Argument.Data"`)}
	}
	return nil
}

func (ac *ArgumentCreate) sqlSave(ctx context.Context) (*Argument, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *ArgumentCreate) createSpec() (*Argument, *sqlgraph.CreateSpec) {
	var (
		_node = &Argument{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: argument.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: argument.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: argument.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: argument.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ac.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: argument.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := ac.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: argument.FieldData,
		})
		_node.Data = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Argument.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArgumentUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ac *ArgumentCreate) OnConflict(opts ...sql.ConflictOption) *ArgumentUpsertOne {
	ac.conflict = opts
	return &ArgumentUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Argument.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *ArgumentCreate) OnConflictColumns(columns ...string) *ArgumentUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ArgumentUpsertOne{
		create: ac,
	}
}

type (
	// ArgumentUpsertOne is the builder for "upsert"-ing
	//  one Argument node.
	ArgumentUpsertOne struct {
		create *ArgumentCreate
	}

	// ArgumentUpsert is the "OnConflict" setter.
	ArgumentUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "Name" field.
func (u *ArgumentUpsert) SetName(v string) *ArgumentUpsert {
	u.Set(argument.FieldName, v)
	return u
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *ArgumentUpsert) UpdateName() *ArgumentUpsert {
	u.SetExcluded(argument.FieldName)
	return u
}

// SetType sets the "Type" field.
func (u *ArgumentUpsert) SetType(v string) *ArgumentUpsert {
	u.Set(argument.FieldType, v)
	return u
}

// UpdateType sets the "Type" field to the value that was provided on create.
func (u *ArgumentUpsert) UpdateType() *ArgumentUpsert {
	u.SetExcluded(argument.FieldType)
	return u
}

// SetTransactionID sets the "TransactionID" field.
func (u *ArgumentUpsert) SetTransactionID(v string) *ArgumentUpsert {
	u.Set(argument.FieldTransactionID, v)
	return u
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *ArgumentUpsert) UpdateTransactionID() *ArgumentUpsert {
	u.SetExcluded(argument.FieldTransactionID)
	return u
}

// SetData sets the "Data" field.
func (u *ArgumentUpsert) SetData(v string) *ArgumentUpsert {
	u.Set(argument.FieldData, v)
	return u
}

// UpdateData sets the "Data" field to the value that was provided on create.
func (u *ArgumentUpsert) UpdateData() *ArgumentUpsert {
	u.SetExcluded(argument.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Argument.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ArgumentUpsertOne) UpdateNewValues() *ArgumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Argument.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ArgumentUpsertOne) Ignore() *ArgumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArgumentUpsertOne) DoNothing() *ArgumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArgumentCreate.OnConflict
// documentation for more info.
func (u *ArgumentUpsertOne) Update(set func(*ArgumentUpsert)) *ArgumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArgumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *ArgumentUpsertOne) SetName(v string) *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *ArgumentUpsertOne) UpdateName() *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "Type" field.
func (u *ArgumentUpsertOne) SetType(v string) *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "Type" field to the value that was provided on create.
func (u *ArgumentUpsertOne) UpdateType() *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateType()
	})
}

// SetTransactionID sets the "TransactionID" field.
func (u *ArgumentUpsertOne) SetTransactionID(v string) *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *ArgumentUpsertOne) UpdateTransactionID() *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateTransactionID()
	})
}

// SetData sets the "Data" field.
func (u *ArgumentUpsertOne) SetData(v string) *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "Data" field to the value that was provided on create.
func (u *ArgumentUpsertOne) UpdateData() *ArgumentUpsertOne {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ArgumentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArgumentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArgumentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ArgumentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ArgumentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ArgumentCreateBulk is the builder for creating many Argument entities in bulk.
type ArgumentCreateBulk struct {
	config
	builders []*ArgumentCreate
	conflict []sql.ConflictOption
}

// Save creates the Argument entities in the database.
func (acb *ArgumentCreateBulk) Save(ctx context.Context) ([]*Argument, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Argument, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArgumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ArgumentCreateBulk) SaveX(ctx context.Context) []*Argument {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ArgumentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ArgumentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Argument.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArgumentUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (acb *ArgumentCreateBulk) OnConflict(opts ...sql.ConflictOption) *ArgumentUpsertBulk {
	acb.conflict = opts
	return &ArgumentUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Argument.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *ArgumentCreateBulk) OnConflictColumns(columns ...string) *ArgumentUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ArgumentUpsertBulk{
		create: acb,
	}
}

// ArgumentUpsertBulk is the builder for "upsert"-ing
// a bulk of Argument nodes.
type ArgumentUpsertBulk struct {
	create *ArgumentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Argument.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ArgumentUpsertBulk) UpdateNewValues() *ArgumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Argument.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ArgumentUpsertBulk) Ignore() *ArgumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArgumentUpsertBulk) DoNothing() *ArgumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArgumentCreateBulk.OnConflict
// documentation for more info.
func (u *ArgumentUpsertBulk) Update(set func(*ArgumentUpsert)) *ArgumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArgumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *ArgumentUpsertBulk) SetName(v string) *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *ArgumentUpsertBulk) UpdateName() *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "Type" field.
func (u *ArgumentUpsertBulk) SetType(v string) *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "Type" field to the value that was provided on create.
func (u *ArgumentUpsertBulk) UpdateType() *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateType()
	})
}

// SetTransactionID sets the "TransactionID" field.
func (u *ArgumentUpsertBulk) SetTransactionID(v string) *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *ArgumentUpsertBulk) UpdateTransactionID() *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateTransactionID()
	})
}

// SetData sets the "Data" field.
func (u *ArgumentUpsertBulk) SetData(v string) *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "Data" field to the value that was provided on create.
func (u *ArgumentUpsertBulk) UpdateData() *ArgumentUpsertBulk {
	return u.Update(func(s *ArgumentUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *ArgumentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ArgumentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArgumentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArgumentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
