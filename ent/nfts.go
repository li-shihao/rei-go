// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/goccy/go-json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/nfts"
)

// NFTs is the model entity for the NFTs schema.
type NFTs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ObjectID holds the value of the "ObjectID" field.
	ObjectID string `json:"ObjectID,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// Metadata holds the value of the "Metadata" field.
	Metadata map[string]interface{} `json:"Metadata,omitempty"`
	// SequenceID holds the value of the "SequenceID" field.
	SequenceID uint64 `json:"SequenceID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NFTs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case nfts.FieldMetadata:
			values[i] = new([]byte)
		case nfts.FieldID, nfts.FieldSequenceID:
			values[i] = new(sql.NullInt64)
		case nfts.FieldObjectID, nfts.FieldType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NFTs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NFTs fields.
func (nt *NFTs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nfts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nt.ID = int(value.Int64)
		case nfts.FieldObjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ObjectID", values[i])
			} else if value.Valid {
				nt.ObjectID = value.String
			}
		case nfts.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				nt.Type = value.String
			}
		case nfts.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &nt.Metadata); err != nil {
					return fmt.Errorf("unmarshal field Metadata: %w", err)
				}
			}
		case nfts.FieldSequenceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SequenceID", values[i])
			} else if value.Valid {
				nt.SequenceID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NFTs.
// Note that you need to call NFTs.Unwrap() before calling this method if this NFTs
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NFTs) Update() *NFTsUpdateOne {
	return (&NFTsClient{config: nt.config}).UpdateOne(nt)
}

// Unwrap unwraps the NFTs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NFTs) Unwrap() *NFTs {
	_tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NFTs is not a transactional entity")
	}
	nt.config.driver = _tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NFTs) String() string {
	var builder strings.Builder
	builder.WriteString("NFTs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nt.ID))
	builder.WriteString("ObjectID=")
	builder.WriteString(nt.ObjectID)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(nt.Type)
	builder.WriteString(", ")
	builder.WriteString("Metadata=")
	builder.WriteString(fmt.Sprintf("%v", nt.Metadata))
	builder.WriteString(", ")
	builder.WriteString("SequenceID=")
	builder.WriteString(fmt.Sprintf("%v", nt.SequenceID))
	builder.WriteByte(')')
	return builder.String()
}

// NFTsSlice is a parsable slice of NFTs.
type NFTsSlice []*NFTs

func (nt NFTsSlice) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
