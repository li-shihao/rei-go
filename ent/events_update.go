// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/events"
	"rei.io/rei/ent/predicate"
)

// EventsUpdate is the builder for updating Events entities.
type EventsUpdate struct {
	config
	hooks    []Hook
	mutation *EventsMutation
}

// Where appends a list predicates to the EventsUpdate builder.
func (eu *EventsUpdate) Where(ps ...predicate.Events) *EventsUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetType sets the "Type" field.
func (eu *EventsUpdate) SetType(s string) *EventsUpdate {
	eu.mutation.SetType(s)
	return eu
}

// SetSender sets the "Sender" field.
func (eu *EventsUpdate) SetSender(s string) *EventsUpdate {
	eu.mutation.SetSender(s)
	return eu
}

// SetRecipient sets the "Recipient" field.
func (eu *EventsUpdate) SetRecipient(s string) *EventsUpdate {
	eu.mutation.SetRecipient(s)
	return eu
}

// SetNillableRecipient sets the "Recipient" field if the given value is not nil.
func (eu *EventsUpdate) SetNillableRecipient(s *string) *EventsUpdate {
	if s != nil {
		eu.SetRecipient(*s)
	}
	return eu
}

// ClearRecipient clears the value of the "Recipient" field.
func (eu *EventsUpdate) ClearRecipient() *EventsUpdate {
	eu.mutation.ClearRecipient()
	return eu
}

// SetTransactionID sets the "TransactionID" field.
func (eu *EventsUpdate) SetTransactionID(s string) *EventsUpdate {
	eu.mutation.SetTransactionID(s)
	return eu
}

// SetObjectID sets the "ObjectID" field.
func (eu *EventsUpdate) SetObjectID(s string) *EventsUpdate {
	eu.mutation.SetObjectID(s)
	return eu
}

// SetVersion sets the "Version" field.
func (eu *EventsUpdate) SetVersion(u uint32) *EventsUpdate {
	eu.mutation.ResetVersion()
	eu.mutation.SetVersion(u)
	return eu
}

// AddVersion adds u to the "Version" field.
func (eu *EventsUpdate) AddVersion(u int32) *EventsUpdate {
	eu.mutation.AddVersion(u)
	return eu
}

// Mutation returns the EventsMutation object of the builder.
func (eu *EventsUpdate) Mutation() *EventsMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventsUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventsUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventsUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EventsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   events.Table,
			Columns: events.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: events.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldType,
		})
	}
	if value, ok := eu.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldSender,
		})
	}
	if value, ok := eu.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldRecipient,
		})
	}
	if eu.mutation.RecipientCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: events.FieldRecipient,
		})
	}
	if value, ok := eu.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldTransactionID,
		})
	}
	if value, ok := eu.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldObjectID,
		})
	}
	if value, ok := eu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: events.FieldVersion,
		})
	}
	if value, ok := eu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: events.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EventsUpdateOne is the builder for updating a single Events entity.
type EventsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventsMutation
}

// SetType sets the "Type" field.
func (euo *EventsUpdateOne) SetType(s string) *EventsUpdateOne {
	euo.mutation.SetType(s)
	return euo
}

// SetSender sets the "Sender" field.
func (euo *EventsUpdateOne) SetSender(s string) *EventsUpdateOne {
	euo.mutation.SetSender(s)
	return euo
}

// SetRecipient sets the "Recipient" field.
func (euo *EventsUpdateOne) SetRecipient(s string) *EventsUpdateOne {
	euo.mutation.SetRecipient(s)
	return euo
}

// SetNillableRecipient sets the "Recipient" field if the given value is not nil.
func (euo *EventsUpdateOne) SetNillableRecipient(s *string) *EventsUpdateOne {
	if s != nil {
		euo.SetRecipient(*s)
	}
	return euo
}

// ClearRecipient clears the value of the "Recipient" field.
func (euo *EventsUpdateOne) ClearRecipient() *EventsUpdateOne {
	euo.mutation.ClearRecipient()
	return euo
}

// SetTransactionID sets the "TransactionID" field.
func (euo *EventsUpdateOne) SetTransactionID(s string) *EventsUpdateOne {
	euo.mutation.SetTransactionID(s)
	return euo
}

// SetObjectID sets the "ObjectID" field.
func (euo *EventsUpdateOne) SetObjectID(s string) *EventsUpdateOne {
	euo.mutation.SetObjectID(s)
	return euo
}

// SetVersion sets the "Version" field.
func (euo *EventsUpdateOne) SetVersion(u uint32) *EventsUpdateOne {
	euo.mutation.ResetVersion()
	euo.mutation.SetVersion(u)
	return euo
}

// AddVersion adds u to the "Version" field.
func (euo *EventsUpdateOne) AddVersion(u int32) *EventsUpdateOne {
	euo.mutation.AddVersion(u)
	return euo
}

// Mutation returns the EventsMutation object of the builder.
func (euo *EventsUpdateOne) Mutation() *EventsMutation {
	return euo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventsUpdateOne) Select(field string, fields ...string) *EventsUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Events entity.
func (euo *EventsUpdateOne) Save(ctx context.Context) (*Events, error) {
	var (
		err  error
		node *Events
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Events)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EventsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventsUpdateOne) SaveX(ctx context.Context) *Events {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventsUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventsUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EventsUpdateOne) sqlSave(ctx context.Context) (_node *Events, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   events.Table,
			Columns: events.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: events.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Events.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, events.FieldID)
		for _, f := range fields {
			if !events.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != events.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldType,
		})
	}
	if value, ok := euo.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldSender,
		})
	}
	if value, ok := euo.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldRecipient,
		})
	}
	if euo.mutation.RecipientCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: events.FieldRecipient,
		})
	}
	if value, ok := euo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldTransactionID,
		})
	}
	if value, ok := euo.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldObjectID,
		})
	}
	if value, ok := euo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: events.FieldVersion,
		})
	}
	if value, ok := euo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: events.FieldVersion,
		})
	}
	_node = &Events{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
