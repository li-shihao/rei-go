// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/events"
)

// EventsCreate is the builder for creating a Events entity.
type EventsCreate struct {
	config
	mutation *EventsMutation
	hooks    []Hook
}

// SetType sets the "Type" field.
func (ec *EventsCreate) SetType(s string) *EventsCreate {
	ec.mutation.SetType(s)
	return ec
}

// SetSender sets the "Sender" field.
func (ec *EventsCreate) SetSender(s string) *EventsCreate {
	ec.mutation.SetSender(s)
	return ec
}

// SetRecipient sets the "Recipient" field.
func (ec *EventsCreate) SetRecipient(s string) *EventsCreate {
	ec.mutation.SetRecipient(s)
	return ec
}

// SetTransactionID sets the "TransactionID" field.
func (ec *EventsCreate) SetTransactionID(s string) *EventsCreate {
	ec.mutation.SetTransactionID(s)
	return ec
}

// SetObjectID sets the "ObjectID" field.
func (ec *EventsCreate) SetObjectID(s string) *EventsCreate {
	ec.mutation.SetObjectID(s)
	return ec
}

// SetVersion sets the "Version" field.
func (ec *EventsCreate) SetVersion(u uint32) *EventsCreate {
	ec.mutation.SetVersion(u)
	return ec
}

// Mutation returns the EventsMutation object of the builder.
func (ec *EventsCreate) Mutation() *EventsMutation {
	return ec.mutation
}

// Save creates the Events in the database.
func (ec *EventsCreate) Save(ctx context.Context) (*Events, error) {
	var (
		err  error
		node *Events
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Events)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EventsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventsCreate) SaveX(ctx context.Context) *Events {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventsCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventsCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventsCreate) check() error {
	if _, ok := ec.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New(`ent: missing required field "Events.Type"`)}
	}
	if _, ok := ec.mutation.Sender(); !ok {
		return &ValidationError{Name: "Sender", err: errors.New(`ent: missing required field "Events.Sender"`)}
	}
	if _, ok := ec.mutation.Recipient(); !ok {
		return &ValidationError{Name: "Recipient", err: errors.New(`ent: missing required field "Events.Recipient"`)}
	}
	if _, ok := ec.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "TransactionID", err: errors.New(`ent: missing required field "Events.TransactionID"`)}
	}
	if _, ok := ec.mutation.ObjectID(); !ok {
		return &ValidationError{Name: "ObjectID", err: errors.New(`ent: missing required field "Events.ObjectID"`)}
	}
	if _, ok := ec.mutation.Version(); !ok {
		return &ValidationError{Name: "Version", err: errors.New(`ent: missing required field "Events.Version"`)}
	}
	return nil
}

func (ec *EventsCreate) sqlSave(ctx context.Context) (*Events, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EventsCreate) createSpec() (*Events, *sqlgraph.CreateSpec) {
	var (
		_node = &Events{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: events.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: events.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ec.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldSender,
		})
		_node.Sender = value
	}
	if value, ok := ec.mutation.Recipient(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldRecipient,
		})
		_node.Recipient = value
	}
	if value, ok := ec.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := ec.mutation.ObjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: events.FieldObjectID,
		})
		_node.ObjectID = value
	}
	if value, ok := ec.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: events.FieldVersion,
		})
		_node.Version = value
	}
	return _node, _spec
}

// EventsCreateBulk is the builder for creating many Events entities in bulk.
type EventsCreateBulk struct {
	config
	builders []*EventsCreate
}

// Save creates the Events entities in the database.
func (ecb *EventsCreateBulk) Save(ctx context.Context) ([]*Events, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Events, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventsCreateBulk) SaveX(ctx context.Context) []*Events {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventsCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventsCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
