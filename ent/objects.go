// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/objects"
)

// Objects is the model entity for the Objects schema.
type Objects struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// DataType holds the value of the "DataType" field.
	DataType string `json:"DataType,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// HasPublicTransfer holds the value of the "Has_public_transfer" field.
	HasPublicTransfer bool `json:"Has_public_transfer,omitempty"`
	// Fields holds the value of the "Fields" field.
	Fields map[string]interface{} `json:"Fields,omitempty"`
	// Owner holds the value of the "Owner" field.
	Owner string `json:"Owner,omitempty"`
	// StorageRebate holds the value of the "StorageRebate" field.
	StorageRebate float64 `json:"StorageRebate,omitempty"`
	// ObjectID holds the value of the "ObjectID" field.
	ObjectID string `json:"ObjectID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Objects) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case objects.FieldFields:
			values[i] = new([]byte)
		case objects.FieldHasPublicTransfer:
			values[i] = new(sql.NullBool)
		case objects.FieldStorageRebate:
			values[i] = new(sql.NullFloat64)
		case objects.FieldID:
			values[i] = new(sql.NullInt64)
		case objects.FieldStatus, objects.FieldDataType, objects.FieldType, objects.FieldOwner, objects.FieldObjectID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Objects", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Objects fields.
func (o *Objects) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case objects.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case objects.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				o.Status = value.String
			}
		case objects.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DataType", values[i])
			} else if value.Valid {
				o.DataType = value.String
			}
		case objects.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				o.Type = value.String
			}
		case objects.FieldHasPublicTransfer:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Has_public_transfer", values[i])
			} else if value.Valid {
				o.HasPublicTransfer = value.Bool
			}
		case objects.FieldFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Fields); err != nil {
					return fmt.Errorf("unmarshal field Fields: %w", err)
				}
			}
		case objects.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Owner", values[i])
			} else if value.Valid {
				o.Owner = value.String
			}
		case objects.FieldStorageRebate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field StorageRebate", values[i])
			} else if value.Valid {
				o.StorageRebate = value.Float64
			}
		case objects.FieldObjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ObjectID", values[i])
			} else if value.Valid {
				o.ObjectID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Objects.
// Note that you need to call Objects.Unwrap() before calling this method if this Objects
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Objects) Update() *ObjectsUpdateOne {
	return (&ObjectsClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Objects entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Objects) Unwrap() *Objects {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Objects is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Objects) String() string {
	var builder strings.Builder
	builder.WriteString("Objects(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("Status=")
	builder.WriteString(o.Status)
	builder.WriteString(", ")
	builder.WriteString("DataType=")
	builder.WriteString(o.DataType)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(o.Type)
	builder.WriteString(", ")
	builder.WriteString("Has_public_transfer=")
	builder.WriteString(fmt.Sprintf("%v", o.HasPublicTransfer))
	builder.WriteString(", ")
	builder.WriteString("Fields=")
	builder.WriteString(fmt.Sprintf("%v", o.Fields))
	builder.WriteString(", ")
	builder.WriteString("Owner=")
	builder.WriteString(o.Owner)
	builder.WriteString(", ")
	builder.WriteString("StorageRebate=")
	builder.WriteString(fmt.Sprintf("%v", o.StorageRebate))
	builder.WriteString(", ")
	builder.WriteString("ObjectID=")
	builder.WriteString(o.ObjectID)
	builder.WriteByte(')')
	return builder.String()
}

// ObjectsSlice is a parsable slice of Objects.
type ObjectsSlice []*Objects

func (o ObjectsSlice) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
