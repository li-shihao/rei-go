// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/arguments"
)

// Arguments is the model entity for the Arguments schema.
type Arguments struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// TransactionID holds the value of the "TransactionID" field.
	TransactionID string `json:"TransactionID,omitempty"`
	// Data holds the value of the "Data" field.
	Data string `json:"Data,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Arguments) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case arguments.FieldID:
			values[i] = new(sql.NullInt64)
		case arguments.FieldName, arguments.FieldType, arguments.FieldTransactionID, arguments.FieldData:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Arguments", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Arguments fields.
func (a *Arguments) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case arguments.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case arguments.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case arguments.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				a.Type = value.String
			}
		case arguments.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionID", values[i])
			} else if value.Valid {
				a.TransactionID = value.String
			}
		case arguments.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Data", values[i])
			} else if value.Valid {
				a.Data = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Arguments.
// Note that you need to call Arguments.Unwrap() before calling this method if this Arguments
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Arguments) Update() *ArgumentsUpdateOne {
	return (&ArgumentsClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Arguments entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Arguments) Unwrap() *Arguments {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Arguments is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Arguments) String() string {
	var builder strings.Builder
	builder.WriteString("Arguments(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("Name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(a.Type)
	builder.WriteString(", ")
	builder.WriteString("TransactionID=")
	builder.WriteString(a.TransactionID)
	builder.WriteString(", ")
	builder.WriteString("Data=")
	builder.WriteString(a.Data)
	builder.WriteByte(')')
	return builder.String()
}

// ArgumentsSlice is a parsable slice of Arguments.
type ArgumentsSlice []*Arguments

func (a ArgumentsSlice) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
