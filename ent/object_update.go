// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/object"
	"rei.io/rei/ent/predicate"
)

// ObjectUpdate is the builder for updating Object entities.
type ObjectUpdate struct {
	config
	hooks     []Hook
	mutation  *ObjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ou *ObjectUpdate) Where(ps ...predicate.Object) *ObjectUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetStatus sets the "Status" field.
func (ou *ObjectUpdate) SetStatus(s string) *ObjectUpdate {
	ou.mutation.SetStatus(s)
	return ou
}

// SetDataType sets the "DataType" field.
func (ou *ObjectUpdate) SetDataType(s string) *ObjectUpdate {
	ou.mutation.SetDataType(s)
	return ou
}

// SetNillableDataType sets the "DataType" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableDataType(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetDataType(*s)
	}
	return ou
}

// ClearDataType clears the value of the "DataType" field.
func (ou *ObjectUpdate) ClearDataType() *ObjectUpdate {
	ou.mutation.ClearDataType()
	return ou
}

// SetType sets the "Type" field.
func (ou *ObjectUpdate) SetType(s string) *ObjectUpdate {
	ou.mutation.SetType(s)
	return ou
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableType(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetType(*s)
	}
	return ou
}

// ClearType clears the value of the "Type" field.
func (ou *ObjectUpdate) ClearType() *ObjectUpdate {
	ou.mutation.ClearType()
	return ou
}

// SetHasPublicTransfer sets the "Has_public_transfer" field.
func (ou *ObjectUpdate) SetHasPublicTransfer(b bool) *ObjectUpdate {
	ou.mutation.SetHasPublicTransfer(b)
	return ou
}

// SetNillableHasPublicTransfer sets the "Has_public_transfer" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableHasPublicTransfer(b *bool) *ObjectUpdate {
	if b != nil {
		ou.SetHasPublicTransfer(*b)
	}
	return ou
}

// ClearHasPublicTransfer clears the value of the "Has_public_transfer" field.
func (ou *ObjectUpdate) ClearHasPublicTransfer() *ObjectUpdate {
	ou.mutation.ClearHasPublicTransfer()
	return ou
}

// SetFields sets the "Fields" field.
func (ou *ObjectUpdate) SetFields(m map[string]interface{}) *ObjectUpdate {
	ou.mutation.SetFields(m)
	return ou
}

// ClearFields clears the value of the "Fields" field.
func (ou *ObjectUpdate) ClearFields() *ObjectUpdate {
	ou.mutation.ClearFields()
	return ou
}

// SetOwner sets the "Owner" field.
func (ou *ObjectUpdate) SetOwner(s string) *ObjectUpdate {
	ou.mutation.SetOwner(s)
	return ou
}

// SetNillableOwner sets the "Owner" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableOwner(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetOwner(*s)
	}
	return ou
}

// ClearOwner clears the value of the "Owner" field.
func (ou *ObjectUpdate) ClearOwner() *ObjectUpdate {
	ou.mutation.ClearOwner()
	return ou
}

// SetObjectID sets the "ObjectID" field.
func (ou *ObjectUpdate) SetObjectID(s string) *ObjectUpdate {
	ou.mutation.SetObjectID(s)
	return ou
}

// SetTransactionID sets the "TransactionID" field.
func (ou *ObjectUpdate) SetTransactionID(s string) *ObjectUpdate {
	ou.mutation.SetTransactionID(s)
	return ou
}

// SetVersion sets the "Version" field.
func (ou *ObjectUpdate) SetVersion(i int) *ObjectUpdate {
	ou.mutation.ResetVersion()
	ou.mutation.SetVersion(i)
	return ou
}

// AddVersion adds i to the "Version" field.
func (ou *ObjectUpdate) AddVersion(i int) *ObjectUpdate {
	ou.mutation.AddVersion(i)
	return ou
}

// Mutation returns the ObjectMutation object of the builder.
func (ou *ObjectUpdate) Mutation() *ObjectMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *ObjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *ObjectUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *ObjectUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *ObjectUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *ObjectUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ObjectUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *ObjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   object.Table,
			Columns: object.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: object.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldStatus,
		})
	}
	if value, ok := ou.mutation.DataType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldDataType,
		})
	}
	if ou.mutation.DataTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: object.FieldDataType,
		})
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldType,
		})
	}
	if ou.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: object.FieldType,
		})
	}
	if value, ok := ou.mutation.HasPublicTransfer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: object.FieldHasPublicTransfer,
		})
	}
	if ou.mutation.HasPublicTransferCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: object.FieldHasPublicTransfer,
		})
	}
	if value, ok := ou.mutation.GetFields(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: object.FieldFields,
		})
	}
	if ou.mutation.FieldsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: object.FieldFields,
		})
	}
	if value, ok := ou.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldOwner,
		})
	}
	if ou.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: object.FieldOwner,
		})
	}
	if value, ok := ou.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldObjectID,
		})
	}
	if value, ok := ou.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldTransactionID,
		})
	}
	if value, ok := ou.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: object.FieldVersion,
		})
	}
	if value, ok := ou.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: object.FieldVersion,
		})
	}
	_spec.Modifiers = ou.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ObjectUpdateOne is the builder for updating a single Object entity.
type ObjectUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ObjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetStatus sets the "Status" field.
func (ouo *ObjectUpdateOne) SetStatus(s string) *ObjectUpdateOne {
	ouo.mutation.SetStatus(s)
	return ouo
}

// SetDataType sets the "DataType" field.
func (ouo *ObjectUpdateOne) SetDataType(s string) *ObjectUpdateOne {
	ouo.mutation.SetDataType(s)
	return ouo
}

// SetNillableDataType sets the "DataType" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableDataType(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetDataType(*s)
	}
	return ouo
}

// ClearDataType clears the value of the "DataType" field.
func (ouo *ObjectUpdateOne) ClearDataType() *ObjectUpdateOne {
	ouo.mutation.ClearDataType()
	return ouo
}

// SetType sets the "Type" field.
func (ouo *ObjectUpdateOne) SetType(s string) *ObjectUpdateOne {
	ouo.mutation.SetType(s)
	return ouo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableType(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetType(*s)
	}
	return ouo
}

// ClearType clears the value of the "Type" field.
func (ouo *ObjectUpdateOne) ClearType() *ObjectUpdateOne {
	ouo.mutation.ClearType()
	return ouo
}

// SetHasPublicTransfer sets the "Has_public_transfer" field.
func (ouo *ObjectUpdateOne) SetHasPublicTransfer(b bool) *ObjectUpdateOne {
	ouo.mutation.SetHasPublicTransfer(b)
	return ouo
}

// SetNillableHasPublicTransfer sets the "Has_public_transfer" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableHasPublicTransfer(b *bool) *ObjectUpdateOne {
	if b != nil {
		ouo.SetHasPublicTransfer(*b)
	}
	return ouo
}

// ClearHasPublicTransfer clears the value of the "Has_public_transfer" field.
func (ouo *ObjectUpdateOne) ClearHasPublicTransfer() *ObjectUpdateOne {
	ouo.mutation.ClearHasPublicTransfer()
	return ouo
}

// SetFields sets the "Fields" field.
func (ouo *ObjectUpdateOne) SetFields(m map[string]interface{}) *ObjectUpdateOne {
	ouo.mutation.SetFields(m)
	return ouo
}

// ClearFields clears the value of the "Fields" field.
func (ouo *ObjectUpdateOne) ClearFields() *ObjectUpdateOne {
	ouo.mutation.ClearFields()
	return ouo
}

// SetOwner sets the "Owner" field.
func (ouo *ObjectUpdateOne) SetOwner(s string) *ObjectUpdateOne {
	ouo.mutation.SetOwner(s)
	return ouo
}

// SetNillableOwner sets the "Owner" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableOwner(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetOwner(*s)
	}
	return ouo
}

// ClearOwner clears the value of the "Owner" field.
func (ouo *ObjectUpdateOne) ClearOwner() *ObjectUpdateOne {
	ouo.mutation.ClearOwner()
	return ouo
}

// SetObjectID sets the "ObjectID" field.
func (ouo *ObjectUpdateOne) SetObjectID(s string) *ObjectUpdateOne {
	ouo.mutation.SetObjectID(s)
	return ouo
}

// SetTransactionID sets the "TransactionID" field.
func (ouo *ObjectUpdateOne) SetTransactionID(s string) *ObjectUpdateOne {
	ouo.mutation.SetTransactionID(s)
	return ouo
}

// SetVersion sets the "Version" field.
func (ouo *ObjectUpdateOne) SetVersion(i int) *ObjectUpdateOne {
	ouo.mutation.ResetVersion()
	ouo.mutation.SetVersion(i)
	return ouo
}

// AddVersion adds i to the "Version" field.
func (ouo *ObjectUpdateOne) AddVersion(i int) *ObjectUpdateOne {
	ouo.mutation.AddVersion(i)
	return ouo
}

// Mutation returns the ObjectMutation object of the builder.
func (ouo *ObjectUpdateOne) Mutation() *ObjectMutation {
	return ouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *ObjectUpdateOne) Select(field string, fields ...string) *ObjectUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Object entity.
func (ouo *ObjectUpdateOne) Save(ctx context.Context) (*Object, error) {
	var (
		err  error
		node *Object
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Object)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ObjectMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *ObjectUpdateOne) SaveX(ctx context.Context) *Object {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *ObjectUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *ObjectUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *ObjectUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ObjectUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *ObjectUpdateOne) sqlSave(ctx context.Context) (_node *Object, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   object.Table,
			Columns: object.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: object.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Object.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, object.FieldID)
		for _, f := range fields {
			if !object.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != object.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldStatus,
		})
	}
	if value, ok := ouo.mutation.DataType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldDataType,
		})
	}
	if ouo.mutation.DataTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: object.FieldDataType,
		})
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldType,
		})
	}
	if ouo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: object.FieldType,
		})
	}
	if value, ok := ouo.mutation.HasPublicTransfer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: object.FieldHasPublicTransfer,
		})
	}
	if ouo.mutation.HasPublicTransferCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: object.FieldHasPublicTransfer,
		})
	}
	if value, ok := ouo.mutation.GetFields(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: object.FieldFields,
		})
	}
	if ouo.mutation.FieldsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: object.FieldFields,
		})
	}
	if value, ok := ouo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldOwner,
		})
	}
	if ouo.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: object.FieldOwner,
		})
	}
	if value, ok := ouo.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldObjectID,
		})
	}
	if value, ok := ouo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: object.FieldTransactionID,
		})
	}
	if value, ok := ouo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: object.FieldVersion,
		})
	}
	if value, ok := ouo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: object.FieldVersion,
		})
	}
	_spec.Modifiers = ouo.modifiers
	_node = &Object{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
