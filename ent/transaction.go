// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/schema"
	"rei.io/rei/ent/transaction"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// Time holds the value of the "Time" field.
	Time time.Time `json:"Time,omitempty"`
	// TransactionID holds the value of the "TransactionID" field.
	TransactionID string `json:"TransactionID,omitempty"`
	// Status holds the value of the "Status" field.
	Status bool `json:"Status,omitempty"`
	// Sender holds the value of the "Sender" field.
	Sender string `json:"Sender,omitempty"`
	// Recipient holds the value of the "Recipient" field.
	Recipient string `json:"Recipient,omitempty"`
	// Amount holds the value of the "Amount" field.
	Amount float64 `json:"Amount,omitempty"`
	// Package holds the value of the "Package" field.
	Package string `json:"Package,omitempty"`
	// Module holds the value of the "Module" field.
	Module string `json:"Module,omitempty"`
	// Function holds the value of the "Function" field.
	Function string `json:"Function,omitempty"`
	// Gas holds the value of the "Gas" field.
	Gas uint32 `json:"Gas,omitempty"`
	// Changed holds the value of the "Changed" field.
	Changed []schema.Changed `json:"Changed,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldChanged:
			values[i] = new([]byte)
		case transaction.FieldStatus:
			values[i] = new(sql.NullBool)
		case transaction.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldID, transaction.FieldGas:
			values[i] = new(sql.NullInt64)
		case transaction.FieldType, transaction.FieldTransactionID, transaction.FieldSender, transaction.FieldRecipient, transaction.FieldPackage, transaction.FieldModule, transaction.FieldFunction:
			values[i] = new(sql.NullString)
		case transaction.FieldTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transaction.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case transaction.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Time", values[i])
			} else if value.Valid {
				t.Time = value.Time
			}
		case transaction.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionID", values[i])
			} else if value.Valid {
				t.TransactionID = value.String
			}
		case transaction.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				t.Status = value.Bool
			}
		case transaction.FieldSender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Sender", values[i])
			} else if value.Valid {
				t.Sender = value.String
			}
		case transaction.FieldRecipient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Recipient", values[i])
			} else if value.Valid {
				t.Recipient = value.String
			}
		case transaction.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Amount", values[i])
			} else if value.Valid {
				t.Amount = value.Float64
			}
		case transaction.FieldPackage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Package", values[i])
			} else if value.Valid {
				t.Package = value.String
			}
		case transaction.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Module", values[i])
			} else if value.Valid {
				t.Module = value.String
			}
		case transaction.FieldFunction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Function", values[i])
			} else if value.Valid {
				t.Function = value.String
			}
		case transaction.FieldGas:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Gas", values[i])
			} else if value.Valid {
				t.Gas = uint32(value.Int64)
			}
		case transaction.FieldChanged:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Changed", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Changed); err != nil {
					return fmt.Errorf("unmarshal field Changed: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return (&TransactionClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("Type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("Time=")
	builder.WriteString(t.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("TransactionID=")
	builder.WriteString(t.TransactionID)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("Sender=")
	builder.WriteString(t.Sender)
	builder.WriteString(", ")
	builder.WriteString("Recipient=")
	builder.WriteString(t.Recipient)
	builder.WriteString(", ")
	builder.WriteString("Amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("Package=")
	builder.WriteString(t.Package)
	builder.WriteString(", ")
	builder.WriteString("Module=")
	builder.WriteString(t.Module)
	builder.WriteString(", ")
	builder.WriteString("Function=")
	builder.WriteString(t.Function)
	builder.WriteString(", ")
	builder.WriteString("Gas=")
	builder.WriteString(fmt.Sprintf("%v", t.Gas))
	builder.WriteString(", ")
	builder.WriteString("Changed=")
	builder.WriteString(fmt.Sprintf("%v", t.Changed))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
