// Code generated by ent, DO NOT EDIT.

package object

import (
	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// DataType applies equality check predicate on the "DataType" field. It's identical to DataTypeEQ.
func DataType(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataType), v))
	})
}

// Type applies equality check predicate on the "Type" field. It's identical to TypeEQ.
func Type(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// HasPublicTransfer applies equality check predicate on the "Has_public_transfer" field. It's identical to HasPublicTransferEQ.
func HasPublicTransfer(v bool) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPublicTransfer), v))
	})
}

// Owner applies equality check predicate on the "Owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwner), v))
	})
}

// ObjectID applies equality check predicate on the "ObjectID" field. It's identical to ObjectIDEQ.
func ObjectID(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// TransactionID applies equality check predicate on the "TransactionID" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// Version applies equality check predicate on the "Version" field. It's identical to VersionEQ.
func Version(v int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// DataTypeEQ applies the EQ predicate on the "DataType" field.
func DataTypeEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataType), v))
	})
}

// DataTypeNEQ applies the NEQ predicate on the "DataType" field.
func DataTypeNEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDataType), v))
	})
}

// DataTypeIn applies the In predicate on the "DataType" field.
func DataTypeIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDataType), v...))
	})
}

// DataTypeNotIn applies the NotIn predicate on the "DataType" field.
func DataTypeNotIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDataType), v...))
	})
}

// DataTypeGT applies the GT predicate on the "DataType" field.
func DataTypeGT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDataType), v))
	})
}

// DataTypeGTE applies the GTE predicate on the "DataType" field.
func DataTypeGTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDataType), v))
	})
}

// DataTypeLT applies the LT predicate on the "DataType" field.
func DataTypeLT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDataType), v))
	})
}

// DataTypeLTE applies the LTE predicate on the "DataType" field.
func DataTypeLTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDataType), v))
	})
}

// DataTypeContains applies the Contains predicate on the "DataType" field.
func DataTypeContains(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDataType), v))
	})
}

// DataTypeHasPrefix applies the HasPrefix predicate on the "DataType" field.
func DataTypeHasPrefix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDataType), v))
	})
}

// DataTypeHasSuffix applies the HasSuffix predicate on the "DataType" field.
func DataTypeHasSuffix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDataType), v))
	})
}

// DataTypeIsNil applies the IsNil predicate on the "DataType" field.
func DataTypeIsNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDataType)))
	})
}

// DataTypeNotNil applies the NotNil predicate on the "DataType" field.
func DataTypeNotNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDataType)))
	})
}

// DataTypeEqualFold applies the EqualFold predicate on the "DataType" field.
func DataTypeEqualFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDataType), v))
	})
}

// DataTypeContainsFold applies the ContainsFold predicate on the "DataType" field.
func DataTypeContainsFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDataType), v))
	})
}

// TypeEQ applies the EQ predicate on the "Type" field.
func TypeEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "Type" field.
func TypeNEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "Type" field.
func TypeIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "Type" field.
func TypeNotIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "Type" field.
func TypeGT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "Type" field.
func TypeGTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "Type" field.
func TypeLT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "Type" field.
func TypeLTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "Type" field.
func TypeContains(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "Type" field.
func TypeHasPrefix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "Type" field.
func TypeHasSuffix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "Type" field.
func TypeIsNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "Type" field.
func TypeNotNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "Type" field.
func TypeEqualFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "Type" field.
func TypeContainsFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// HasPublicTransferEQ applies the EQ predicate on the "Has_public_transfer" field.
func HasPublicTransferEQ(v bool) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasPublicTransfer), v))
	})
}

// HasPublicTransferNEQ applies the NEQ predicate on the "Has_public_transfer" field.
func HasPublicTransferNEQ(v bool) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasPublicTransfer), v))
	})
}

// HasPublicTransferIsNil applies the IsNil predicate on the "Has_public_transfer" field.
func HasPublicTransferIsNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHasPublicTransfer)))
	})
}

// HasPublicTransferNotNil applies the NotNil predicate on the "Has_public_transfer" field.
func HasPublicTransferNotNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHasPublicTransfer)))
	})
}

// FieldsIsNil applies the IsNil predicate on the "Fields" field.
func FieldsIsNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFields)))
	})
}

// FieldsNotNil applies the NotNil predicate on the "Fields" field.
func FieldsNotNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFields)))
	})
}

// OwnerEQ applies the EQ predicate on the "Owner" field.
func OwnerEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwner), v))
	})
}

// OwnerNEQ applies the NEQ predicate on the "Owner" field.
func OwnerNEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwner), v))
	})
}

// OwnerIn applies the In predicate on the "Owner" field.
func OwnerIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwner), v...))
	})
}

// OwnerNotIn applies the NotIn predicate on the "Owner" field.
func OwnerNotIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwner), v...))
	})
}

// OwnerGT applies the GT predicate on the "Owner" field.
func OwnerGT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwner), v))
	})
}

// OwnerGTE applies the GTE predicate on the "Owner" field.
func OwnerGTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwner), v))
	})
}

// OwnerLT applies the LT predicate on the "Owner" field.
func OwnerLT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwner), v))
	})
}

// OwnerLTE applies the LTE predicate on the "Owner" field.
func OwnerLTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwner), v))
	})
}

// OwnerContains applies the Contains predicate on the "Owner" field.
func OwnerContains(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwner), v))
	})
}

// OwnerHasPrefix applies the HasPrefix predicate on the "Owner" field.
func OwnerHasPrefix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwner), v))
	})
}

// OwnerHasSuffix applies the HasSuffix predicate on the "Owner" field.
func OwnerHasSuffix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwner), v))
	})
}

// OwnerIsNil applies the IsNil predicate on the "Owner" field.
func OwnerIsNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOwner)))
	})
}

// OwnerNotNil applies the NotNil predicate on the "Owner" field.
func OwnerNotNil() predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOwner)))
	})
}

// OwnerEqualFold applies the EqualFold predicate on the "Owner" field.
func OwnerEqualFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwner), v))
	})
}

// OwnerContainsFold applies the ContainsFold predicate on the "Owner" field.
func OwnerContainsFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwner), v))
	})
}

// ObjectIDEQ applies the EQ predicate on the "ObjectID" field.
func ObjectIDEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDNEQ applies the NEQ predicate on the "ObjectID" field.
func ObjectIDNEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDIn applies the In predicate on the "ObjectID" field.
func ObjectIDIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldObjectID), v...))
	})
}

// ObjectIDNotIn applies the NotIn predicate on the "ObjectID" field.
func ObjectIDNotIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldObjectID), v...))
	})
}

// ObjectIDGT applies the GT predicate on the "ObjectID" field.
func ObjectIDGT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectID), v))
	})
}

// ObjectIDGTE applies the GTE predicate on the "ObjectID" field.
func ObjectIDGTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectID), v))
	})
}

// ObjectIDLT applies the LT predicate on the "ObjectID" field.
func ObjectIDLT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectID), v))
	})
}

// ObjectIDLTE applies the LTE predicate on the "ObjectID" field.
func ObjectIDLTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectID), v))
	})
}

// ObjectIDContains applies the Contains predicate on the "ObjectID" field.
func ObjectIDContains(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldObjectID), v))
	})
}

// ObjectIDHasPrefix applies the HasPrefix predicate on the "ObjectID" field.
func ObjectIDHasPrefix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldObjectID), v))
	})
}

// ObjectIDHasSuffix applies the HasSuffix predicate on the "ObjectID" field.
func ObjectIDHasSuffix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldObjectID), v))
	})
}

// ObjectIDEqualFold applies the EqualFold predicate on the "ObjectID" field.
func ObjectIDEqualFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldObjectID), v))
	})
}

// ObjectIDContainsFold applies the ContainsFold predicate on the "ObjectID" field.
func ObjectIDContainsFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldObjectID), v))
	})
}

// TransactionIDEQ applies the EQ predicate on the "TransactionID" field.
func TransactionIDEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDNEQ applies the NEQ predicate on the "TransactionID" field.
func TransactionIDNEQ(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIn applies the In predicate on the "TransactionID" field.
func TransactionIDIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDNotIn applies the NotIn predicate on the "TransactionID" field.
func TransactionIDNotIn(vs ...string) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDGT applies the GT predicate on the "TransactionID" field.
func TransactionIDGT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDGTE applies the GTE predicate on the "TransactionID" field.
func TransactionIDGTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLT applies the LT predicate on the "TransactionID" field.
func TransactionIDLT(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLTE applies the LTE predicate on the "TransactionID" field.
func TransactionIDLTE(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContains applies the Contains predicate on the "TransactionID" field.
func TransactionIDContains(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "TransactionID" field.
func TransactionIDHasPrefix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "TransactionID" field.
func TransactionIDHasSuffix(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDEqualFold applies the EqualFold predicate on the "TransactionID" field.
func TransactionIDEqualFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "TransactionID" field.
func TransactionIDContainsFold(v string) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionID), v))
	})
}

// VersionEQ applies the EQ predicate on the "Version" field.
func VersionEQ(v int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "Version" field.
func VersionNEQ(v int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "Version" field.
func VersionIn(vs ...int) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "Version" field.
func VersionNotIn(vs ...int) predicate.Object {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "Version" field.
func VersionGT(v int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "Version" field.
func VersionGTE(v int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "Version" field.
func VersionLT(v int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "Version" field.
func VersionLTE(v int) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Object) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Object) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Object) predicate.Object {
	return predicate.Object(func(s *sql.Selector) {
		p(s.Not())
	})
}
