// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/packages"
)

// Packages is the model entity for the Packages schema.
type Packages struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransactionID holds the value of the "TransactionID" field.
	TransactionID string `json:"TransactionID,omitempty"`
	// ObjectID holds the value of the "ObjectID" field.
	ObjectID string `json:"ObjectID,omitempty"`
	// Bytecode holds the value of the "Bytecode" field.
	Bytecode map[string]interface{} `json:"Bytecode,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Packages) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case packages.FieldBytecode:
			values[i] = new([]byte)
		case packages.FieldID:
			values[i] = new(sql.NullInt64)
		case packages.FieldTransactionID, packages.FieldObjectID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Packages", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Packages fields.
func (pa *Packages) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packages.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case packages.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransactionID", values[i])
			} else if value.Valid {
				pa.TransactionID = value.String
			}
		case packages.FieldObjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ObjectID", values[i])
			} else if value.Valid {
				pa.ObjectID = value.String
			}
		case packages.FieldBytecode:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Bytecode", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pa.Bytecode); err != nil {
					return fmt.Errorf("unmarshal field Bytecode: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Packages.
// Note that you need to call Packages.Unwrap() before calling this method if this Packages
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Packages) Update() *PackagesUpdateOne {
	return (&PackagesClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Packages entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Packages) Unwrap() *Packages {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Packages is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Packages) String() string {
	var builder strings.Builder
	builder.WriteString("Packages(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("TransactionID=")
	builder.WriteString(pa.TransactionID)
	builder.WriteString(", ")
	builder.WriteString("ObjectID=")
	builder.WriteString(pa.ObjectID)
	builder.WriteString(", ")
	builder.WriteString("Bytecode=")
	builder.WriteString(fmt.Sprintf("%v", pa.Bytecode))
	builder.WriteByte(')')
	return builder.String()
}

// PackagesSlice is a parsable slice of Packages.
type PackagesSlice []*Packages

func (pa PackagesSlice) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
