// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/nfts"
	"rei.io/rei/ent/predicate"
)

// NFTsUpdate is the builder for updating NFTs entities.
type NFTsUpdate struct {
	config
	hooks    []Hook
	mutation *NFTsMutation
}

// Where appends a list predicates to the NFTsUpdate builder.
func (ntu *NFTsUpdate) Where(ps ...predicate.NFTs) *NFTsUpdate {
	ntu.mutation.Where(ps...)
	return ntu
}

// SetObjectID sets the "ObjectID" field.
func (ntu *NFTsUpdate) SetObjectID(s string) *NFTsUpdate {
	ntu.mutation.SetObjectID(s)
	return ntu
}

// SetType sets the "Type" field.
func (ntu *NFTsUpdate) SetType(s string) *NFTsUpdate {
	ntu.mutation.SetType(s)
	return ntu
}

// SetMetadata sets the "Metadata" field.
func (ntu *NFTsUpdate) SetMetadata(m map[string]interface{}) *NFTsUpdate {
	ntu.mutation.SetMetadata(m)
	return ntu
}

// SetTime sets the "Time" field.
func (ntu *NFTsUpdate) SetTime(t time.Time) *NFTsUpdate {
	ntu.mutation.SetTime(t)
	return ntu
}

// Mutation returns the NFTsMutation object of the builder.
func (ntu *NFTsUpdate) Mutation() *NFTsMutation {
	return ntu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntu *NFTsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ntu.hooks) == 0 {
		affected, err = ntu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NFTsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntu.mutation = mutation
			affected, err = ntu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ntu.hooks) - 1; i >= 0; i-- {
			if ntu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ntu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NFTsUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NFTsUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NFTsUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntu *NFTsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nfts.Table,
			Columns: nfts.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nfts.FieldID,
			},
		},
	}
	if ps := ntu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nfts.FieldObjectID,
		})
	}
	if value, ok := ntu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nfts.FieldType,
		})
	}
	if value, ok := ntu.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: nfts.FieldMetadata,
		})
	}
	if value, ok := ntu.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nfts.FieldTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nfts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NFTsUpdateOne is the builder for updating a single NFTs entity.
type NFTsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NFTsMutation
}

// SetObjectID sets the "ObjectID" field.
func (ntuo *NFTsUpdateOne) SetObjectID(s string) *NFTsUpdateOne {
	ntuo.mutation.SetObjectID(s)
	return ntuo
}

// SetType sets the "Type" field.
func (ntuo *NFTsUpdateOne) SetType(s string) *NFTsUpdateOne {
	ntuo.mutation.SetType(s)
	return ntuo
}

// SetMetadata sets the "Metadata" field.
func (ntuo *NFTsUpdateOne) SetMetadata(m map[string]interface{}) *NFTsUpdateOne {
	ntuo.mutation.SetMetadata(m)
	return ntuo
}

// SetTime sets the "Time" field.
func (ntuo *NFTsUpdateOne) SetTime(t time.Time) *NFTsUpdateOne {
	ntuo.mutation.SetTime(t)
	return ntuo
}

// Mutation returns the NFTsMutation object of the builder.
func (ntuo *NFTsUpdateOne) Mutation() *NFTsMutation {
	return ntuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ntuo *NFTsUpdateOne) Select(field string, fields ...string) *NFTsUpdateOne {
	ntuo.fields = append([]string{field}, fields...)
	return ntuo
}

// Save executes the query and returns the updated NFTs entity.
func (ntuo *NFTsUpdateOne) Save(ctx context.Context) (*NFTs, error) {
	var (
		err  error
		node *NFTs
	)
	if len(ntuo.hooks) == 0 {
		node, err = ntuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NFTsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntuo.mutation = mutation
			node, err = ntuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntuo.hooks) - 1; i >= 0; i-- {
			if ntuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ntuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ntuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NFTs)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NFTsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NFTsUpdateOne) SaveX(ctx context.Context) *NFTs {
	node, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntuo *NFTsUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NFTsUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ntuo *NFTsUpdateOne) sqlSave(ctx context.Context) (_node *NFTs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nfts.Table,
			Columns: nfts.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nfts.FieldID,
			},
		},
	}
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NFTs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ntuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nfts.FieldID)
		for _, f := range fields {
			if !nfts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nfts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ntuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntuo.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nfts.FieldObjectID,
		})
	}
	if value, ok := ntuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nfts.FieldType,
		})
	}
	if value, ok := ntuo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: nfts.FieldMetadata,
		})
	}
	if value, ok := ntuo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nfts.FieldTime,
		})
	}
	_node = &NFTs{config: ntuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nfts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
