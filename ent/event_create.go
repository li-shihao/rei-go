// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/event"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "Type" field.
func (ec *EventCreate) SetType(s string) *EventCreate {
	ec.mutation.SetType(s)
	return ec
}

// SetSender sets the "Sender" field.
func (ec *EventCreate) SetSender(s string) *EventCreate {
	ec.mutation.SetSender(s)
	return ec
}

// SetRecipient sets the "Recipient" field.
func (ec *EventCreate) SetRecipient(s string) *EventCreate {
	ec.mutation.SetRecipient(s)
	return ec
}

// SetNillableRecipient sets the "Recipient" field if the given value is not nil.
func (ec *EventCreate) SetNillableRecipient(s *string) *EventCreate {
	if s != nil {
		ec.SetRecipient(*s)
	}
	return ec
}

// SetTransactionID sets the "TransactionID" field.
func (ec *EventCreate) SetTransactionID(s string) *EventCreate {
	ec.mutation.SetTransactionID(s)
	return ec
}

// SetObjectID sets the "ObjectID" field.
func (ec *EventCreate) SetObjectID(s string) *EventCreate {
	ec.mutation.SetObjectID(s)
	return ec
}

// SetVersion sets the "Version" field.
func (ec *EventCreate) SetVersion(u uint32) *EventCreate {
	ec.mutation.SetVersion(u)
	return ec
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Event)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EventMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New(`ent: missing required field "Event.Type"`)}
	}
	if _, ok := ec.mutation.Sender(); !ok {
		return &ValidationError{Name: "Sender", err: errors.New(`ent: missing required field "Event.Sender"`)}
	}
	if _, ok := ec.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "TransactionID", err: errors.New(`ent: missing required field "Event.TransactionID"`)}
	}
	if _, ok := ec.mutation.ObjectID(); !ok {
		return &ValidationError{Name: "ObjectID", err: errors.New(`ent: missing required field "Event.ObjectID"`)}
	}
	if _, ok := ec.mutation.Version(); !ok {
		return &ValidationError{Name: "Version", err: errors.New(`ent: missing required field "Event.Version"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: event.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		}
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ec.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldSender,
		})
		_node.Sender = value
	}
	if value, ok := ec.mutation.Recipient(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldRecipient,
		})
		_node.Recipient = value
	}
	if value, ok := ec.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := ec.mutation.ObjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldObjectID,
		})
		_node.ObjectID = value
	}
	if value, ok := ec.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: event.FieldVersion,
		})
		_node.Version = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "Type" field.
func (u *EventUpsert) SetType(v string) *EventUpsert {
	u.Set(event.FieldType, v)
	return u
}

// UpdateType sets the "Type" field to the value that was provided on create.
func (u *EventUpsert) UpdateType() *EventUpsert {
	u.SetExcluded(event.FieldType)
	return u
}

// SetSender sets the "Sender" field.
func (u *EventUpsert) SetSender(v string) *EventUpsert {
	u.Set(event.FieldSender, v)
	return u
}

// UpdateSender sets the "Sender" field to the value that was provided on create.
func (u *EventUpsert) UpdateSender() *EventUpsert {
	u.SetExcluded(event.FieldSender)
	return u
}

// SetRecipient sets the "Recipient" field.
func (u *EventUpsert) SetRecipient(v string) *EventUpsert {
	u.Set(event.FieldRecipient, v)
	return u
}

// UpdateRecipient sets the "Recipient" field to the value that was provided on create.
func (u *EventUpsert) UpdateRecipient() *EventUpsert {
	u.SetExcluded(event.FieldRecipient)
	return u
}

// ClearRecipient clears the value of the "Recipient" field.
func (u *EventUpsert) ClearRecipient() *EventUpsert {
	u.SetNull(event.FieldRecipient)
	return u
}

// SetTransactionID sets the "TransactionID" field.
func (u *EventUpsert) SetTransactionID(v string) *EventUpsert {
	u.Set(event.FieldTransactionID, v)
	return u
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *EventUpsert) UpdateTransactionID() *EventUpsert {
	u.SetExcluded(event.FieldTransactionID)
	return u
}

// SetObjectID sets the "ObjectID" field.
func (u *EventUpsert) SetObjectID(v string) *EventUpsert {
	u.Set(event.FieldObjectID, v)
	return u
}

// UpdateObjectID sets the "ObjectID" field to the value that was provided on create.
func (u *EventUpsert) UpdateObjectID() *EventUpsert {
	u.SetExcluded(event.FieldObjectID)
	return u
}

// SetVersion sets the "Version" field.
func (u *EventUpsert) SetVersion(v uint32) *EventUpsert {
	u.Set(event.FieldVersion, v)
	return u
}

// UpdateVersion sets the "Version" field to the value that was provided on create.
func (u *EventUpsert) UpdateVersion() *EventUpsert {
	u.SetExcluded(event.FieldVersion)
	return u
}

// AddVersion adds v to the "Version" field.
func (u *EventUpsert) AddVersion(v uint32) *EventUpsert {
	u.Add(event.FieldVersion, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "Type" field.
func (u *EventUpsertOne) SetType(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "Type" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateType()
	})
}

// SetSender sets the "Sender" field.
func (u *EventUpsertOne) SetSender(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "Sender" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateSender() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSender()
	})
}

// SetRecipient sets the "Recipient" field.
func (u *EventUpsertOne) SetRecipient(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetRecipient(v)
	})
}

// UpdateRecipient sets the "Recipient" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateRecipient() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRecipient()
	})
}

// ClearRecipient clears the value of the "Recipient" field.
func (u *EventUpsertOne) ClearRecipient() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearRecipient()
	})
}

// SetTransactionID sets the "TransactionID" field.
func (u *EventUpsertOne) SetTransactionID(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateTransactionID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTransactionID()
	})
}

// SetObjectID sets the "ObjectID" field.
func (u *EventUpsertOne) SetObjectID(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetObjectID(v)
	})
}

// UpdateObjectID sets the "ObjectID" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateObjectID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateObjectID()
	})
}

// SetVersion sets the "Version" field.
func (u *EventUpsertOne) SetVersion(v uint32) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "Version" field.
func (u *EventUpsertOne) AddVersion(v uint32) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "Version" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateVersion() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "Type" field.
func (u *EventUpsertBulk) SetType(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "Type" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateType()
	})
}

// SetSender sets the "Sender" field.
func (u *EventUpsertBulk) SetSender(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "Sender" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateSender() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateSender()
	})
}

// SetRecipient sets the "Recipient" field.
func (u *EventUpsertBulk) SetRecipient(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetRecipient(v)
	})
}

// UpdateRecipient sets the "Recipient" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateRecipient() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRecipient()
	})
}

// ClearRecipient clears the value of the "Recipient" field.
func (u *EventUpsertBulk) ClearRecipient() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearRecipient()
	})
}

// SetTransactionID sets the "TransactionID" field.
func (u *EventUpsertBulk) SetTransactionID(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "TransactionID" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateTransactionID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTransactionID()
	})
}

// SetObjectID sets the "ObjectID" field.
func (u *EventUpsertBulk) SetObjectID(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetObjectID(v)
	})
}

// UpdateObjectID sets the "ObjectID" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateObjectID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateObjectID()
	})
}

// SetVersion sets the "Version" field.
func (u *EventUpsertBulk) SetVersion(v uint32) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "Version" field.
func (u *EventUpsertBulk) AddVersion(v uint32) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "Version" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateVersion() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
