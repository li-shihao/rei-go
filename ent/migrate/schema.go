// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sequence_id", Type: field.TypeUint64},
		{Name: "account_id", Type: field.TypeString},
		{Name: "balance", Type: field.TypeUint64},
		{Name: "objects", Type: field.TypeJSON},
		{Name: "transactions", Type: field.TypeJSON, Nullable: true},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "account_sequence_id_account_id",
				Unique:  true,
				Columns: []*schema.Column{AccountsColumns[1], AccountsColumns[2]},
			},
		},
	}
	// ArgumentsColumns holds the columns for the "arguments" table.
	ArgumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "transaction_id", Type: field.TypeString},
		{Name: "data", Type: field.TypeString},
	}
	// ArgumentsTable holds the schema information for the "arguments" table.
	ArgumentsTable = &schema.Table{
		Name:       "arguments",
		Columns:    ArgumentsColumns,
		PrimaryKey: []*schema.Column{ArgumentsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "argument_name_type_transaction_id",
				Unique:  true,
				Columns: []*schema.Column{ArgumentsColumns[1], ArgumentsColumns[2], ArgumentsColumns[3]},
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "sender", Type: field.TypeString},
		{Name: "recipient", Type: field.TypeString, Nullable: true},
		{Name: "transaction_id", Type: field.TypeString},
		{Name: "object_id", Type: field.TypeString},
		{Name: "version", Type: field.TypeUint32},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "event_transaction_id_type_object_id_version",
				Unique:  true,
				Columns: []*schema.Column{EventsColumns[4], EventsColumns[1], EventsColumns[5], EventsColumns[6]},
			},
		},
	}
	// NfTsColumns holds the columns for the "nf_ts" table.
	NfTsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "object_id", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON},
		{Name: "sequence_id", Type: field.TypeUint64},
	}
	// NfTsTable holds the schema information for the "nf_ts" table.
	NfTsTable = &schema.Table{
		Name:       "nf_ts",
		Columns:    NfTsColumns,
		PrimaryKey: []*schema.Column{NfTsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "nft_object_id_sequence_id",
				Unique:  true,
				Columns: []*schema.Column{NfTsColumns[1], NfTsColumns[4]},
			},
		},
	}
	// ObjectsColumns holds the columns for the "objects" table.
	ObjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString},
		{Name: "data_type", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "has_public_transfer", Type: field.TypeBool},
		{Name: "fields", Type: field.TypeJSON},
		{Name: "owner", Type: field.TypeString},
		{Name: "object_id", Type: field.TypeString},
		{Name: "sequence_id", Type: field.TypeUint64},
	}
	// ObjectsTable holds the schema information for the "objects" table.
	ObjectsTable = &schema.Table{
		Name:       "objects",
		Columns:    ObjectsColumns,
		PrimaryKey: []*schema.Column{ObjectsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "object_sequence_id_object_id",
				Unique:  true,
				Columns: []*schema.Column{ObjectsColumns[8], ObjectsColumns[7]},
			},
		},
	}
	// PkgsColumns holds the columns for the "pkgs" table.
	PkgsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "transaction_id", Type: field.TypeString},
		{Name: "object_id", Type: field.TypeString},
		{Name: "bytecode", Type: field.TypeJSON},
	}
	// PkgsTable holds the schema information for the "pkgs" table.
	PkgsTable = &schema.Table{
		Name:       "pkgs",
		Columns:    PkgsColumns,
		PrimaryKey: []*schema.Column{PkgsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "pkg_transaction_id_object_id",
				Unique:  true,
				Columns: []*schema.Column{PkgsColumns[1], PkgsColumns[2]},
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString},
		{Name: "login_time", Type: field.TypeTime},
		{Name: "login_ip", Type: field.TypeString},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "time", Type: field.TypeTime},
		{Name: "transaction_id", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeBool},
		{Name: "sender", Type: field.TypeString},
		{Name: "recipient", Type: field.TypeString, Nullable: true},
		{Name: "amount", Type: field.TypeFloat64, Nullable: true},
		{Name: "package", Type: field.TypeString, Nullable: true},
		{Name: "module", Type: field.TypeString, Nullable: true},
		{Name: "function", Type: field.TypeString, Nullable: true},
		{Name: "gas", Type: field.TypeUint32},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "hash", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		ArgumentsTable,
		EventsTable,
		NfTsTable,
		ObjectsTable,
		PkgsTable,
		SessionsTable,
		TransactionsTable,
		UsersTable,
	}
)

func init() {
}
