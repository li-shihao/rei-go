// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/object"
)

// Object is the model entity for the Object schema.
type Object struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// DataType holds the value of the "DataType" field.
	DataType string `json:"DataType,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// HasPublicTransfer holds the value of the "Has_public_transfer" field.
	HasPublicTransfer bool `json:"Has_public_transfer,omitempty"`
	// Fields holds the value of the "Fields" field.
	Fields map[string]interface{} `json:"Fields,omitempty"`
	// Owner holds the value of the "Owner" field.
	Owner string `json:"Owner,omitempty"`
	// ObjectID holds the value of the "ObjectID" field.
	ObjectID string `json:"ObjectID,omitempty"`
	// SequenceID holds the value of the "SequenceID" field.
	SequenceID uint64 `json:"SequenceID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Object) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case object.FieldFields:
			values[i] = new([]byte)
		case object.FieldHasPublicTransfer:
			values[i] = new(sql.NullBool)
		case object.FieldID, object.FieldSequenceID:
			values[i] = new(sql.NullInt64)
		case object.FieldStatus, object.FieldDataType, object.FieldType, object.FieldOwner, object.FieldObjectID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Object", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Object fields.
func (o *Object) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case object.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case object.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				o.Status = value.String
			}
		case object.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DataType", values[i])
			} else if value.Valid {
				o.DataType = value.String
			}
		case object.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				o.Type = value.String
			}
		case object.FieldHasPublicTransfer:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Has_public_transfer", values[i])
			} else if value.Valid {
				o.HasPublicTransfer = value.Bool
			}
		case object.FieldFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Fields); err != nil {
					return fmt.Errorf("unmarshal field Fields: %w", err)
				}
			}
		case object.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Owner", values[i])
			} else if value.Valid {
				o.Owner = value.String
			}
		case object.FieldObjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ObjectID", values[i])
			} else if value.Valid {
				o.ObjectID = value.String
			}
		case object.FieldSequenceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SequenceID", values[i])
			} else if value.Valid {
				o.SequenceID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Object.
// Note that you need to call Object.Unwrap() before calling this method if this Object
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Object) Update() *ObjectUpdateOne {
	return (&ObjectClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Object entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Object) Unwrap() *Object {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Object is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Object) String() string {
	var builder strings.Builder
	builder.WriteString("Object(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("Status=")
	builder.WriteString(o.Status)
	builder.WriteString(", ")
	builder.WriteString("DataType=")
	builder.WriteString(o.DataType)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(o.Type)
	builder.WriteString(", ")
	builder.WriteString("Has_public_transfer=")
	builder.WriteString(fmt.Sprintf("%v", o.HasPublicTransfer))
	builder.WriteString(", ")
	builder.WriteString("Fields=")
	builder.WriteString(fmt.Sprintf("%v", o.Fields))
	builder.WriteString(", ")
	builder.WriteString("Owner=")
	builder.WriteString(o.Owner)
	builder.WriteString(", ")
	builder.WriteString("ObjectID=")
	builder.WriteString(o.ObjectID)
	builder.WriteString(", ")
	builder.WriteString("SequenceID=")
	builder.WriteString(fmt.Sprintf("%v", o.SequenceID))
	builder.WriteByte(')')
	return builder.String()
}

// Objects is a parsable slice of Object.
type Objects []*Object

func (o Objects) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
