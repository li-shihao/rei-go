// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"rei.io/rei/ent/sessions"
)

// Sessions is the model entity for the Sessions schema.
type Sessions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "Username" field.
	Username string `json:"Username,omitempty"`
	// LoginTime holds the value of the "LoginTime" field.
	LoginTime time.Time `json:"LoginTime,omitempty"`
	// LoginIP holds the value of the "LoginIP" field.
	LoginIP string `json:"LoginIP,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sessions) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sessions.FieldID:
			values[i] = new(sql.NullInt64)
		case sessions.FieldUsername, sessions.FieldLoginIP:
			values[i] = new(sql.NullString)
		case sessions.FieldLoginTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sessions", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sessions fields.
func (s *Sessions) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sessions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sessions.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		case sessions.FieldLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field LoginTime", values[i])
			} else if value.Valid {
				s.LoginTime = value.Time
			}
		case sessions.FieldLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LoginIP", values[i])
			} else if value.Valid {
				s.LoginIP = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Sessions.
// Note that you need to call Sessions.Unwrap() before calling this method if this Sessions
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sessions) Update() *SessionsUpdateOne {
	return (&SessionsClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Sessions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sessions) Unwrap() *Sessions {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sessions is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sessions) String() string {
	var builder strings.Builder
	builder.WriteString("Sessions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("Username=")
	builder.WriteString(s.Username)
	builder.WriteString(", ")
	builder.WriteString("LoginTime=")
	builder.WriteString(s.LoginTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("LoginIP=")
	builder.WriteString(s.LoginIP)
	builder.WriteByte(')')
	return builder.String()
}

// SessionsSlice is a parsable slice of Sessions.
type SessionsSlice []*Sessions

func (s SessionsSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
