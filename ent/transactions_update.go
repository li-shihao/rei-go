// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"rei.io/rei/ent/predicate"
	"rei.io/rei/ent/transactions"
)

// TransactionsUpdate is the builder for updating Transactions entities.
type TransactionsUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionsMutation
}

// Where appends a list predicates to the TransactionsUpdate builder.
func (tu *TransactionsUpdate) Where(ps ...predicate.Transactions) *TransactionsUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetType sets the "Type" field.
func (tu *TransactionsUpdate) SetType(s string) *TransactionsUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetTime sets the "Time" field.
func (tu *TransactionsUpdate) SetTime(t time.Time) *TransactionsUpdate {
	tu.mutation.SetTime(t)
	return tu
}

// SetTransactionID sets the "TransactionID" field.
func (tu *TransactionsUpdate) SetTransactionID(s string) *TransactionsUpdate {
	tu.mutation.SetTransactionID(s)
	return tu
}

// SetStatus sets the "Status" field.
func (tu *TransactionsUpdate) SetStatus(b bool) *TransactionsUpdate {
	tu.mutation.SetStatus(b)
	return tu
}

// SetSender sets the "Sender" field.
func (tu *TransactionsUpdate) SetSender(s string) *TransactionsUpdate {
	tu.mutation.SetSender(s)
	return tu
}

// SetRecipient sets the "Recipient" field.
func (tu *TransactionsUpdate) SetRecipient(s string) *TransactionsUpdate {
	tu.mutation.SetRecipient(s)
	return tu
}

// SetNillableRecipient sets the "Recipient" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableRecipient(s *string) *TransactionsUpdate {
	if s != nil {
		tu.SetRecipient(*s)
	}
	return tu
}

// ClearRecipient clears the value of the "Recipient" field.
func (tu *TransactionsUpdate) ClearRecipient() *TransactionsUpdate {
	tu.mutation.ClearRecipient()
	return tu
}

// SetAmount sets the "Amount" field.
func (tu *TransactionsUpdate) SetAmount(f float64) *TransactionsUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(f)
	return tu
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableAmount(f *float64) *TransactionsUpdate {
	if f != nil {
		tu.SetAmount(*f)
	}
	return tu
}

// AddAmount adds f to the "Amount" field.
func (tu *TransactionsUpdate) AddAmount(f float64) *TransactionsUpdate {
	tu.mutation.AddAmount(f)
	return tu
}

// ClearAmount clears the value of the "Amount" field.
func (tu *TransactionsUpdate) ClearAmount() *TransactionsUpdate {
	tu.mutation.ClearAmount()
	return tu
}

// SetPackage sets the "Package" field.
func (tu *TransactionsUpdate) SetPackage(s string) *TransactionsUpdate {
	tu.mutation.SetPackage(s)
	return tu
}

// SetNillablePackage sets the "Package" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillablePackage(s *string) *TransactionsUpdate {
	if s != nil {
		tu.SetPackage(*s)
	}
	return tu
}

// ClearPackage clears the value of the "Package" field.
func (tu *TransactionsUpdate) ClearPackage() *TransactionsUpdate {
	tu.mutation.ClearPackage()
	return tu
}

// SetModule sets the "Module" field.
func (tu *TransactionsUpdate) SetModule(s string) *TransactionsUpdate {
	tu.mutation.SetModule(s)
	return tu
}

// SetNillableModule sets the "Module" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableModule(s *string) *TransactionsUpdate {
	if s != nil {
		tu.SetModule(*s)
	}
	return tu
}

// ClearModule clears the value of the "Module" field.
func (tu *TransactionsUpdate) ClearModule() *TransactionsUpdate {
	tu.mutation.ClearModule()
	return tu
}

// SetFunction sets the "Function" field.
func (tu *TransactionsUpdate) SetFunction(s string) *TransactionsUpdate {
	tu.mutation.SetFunction(s)
	return tu
}

// SetNillableFunction sets the "Function" field if the given value is not nil.
func (tu *TransactionsUpdate) SetNillableFunction(s *string) *TransactionsUpdate {
	if s != nil {
		tu.SetFunction(*s)
	}
	return tu
}

// ClearFunction clears the value of the "Function" field.
func (tu *TransactionsUpdate) ClearFunction() *TransactionsUpdate {
	tu.mutation.ClearFunction()
	return tu
}

// SetGas sets the "Gas" field.
func (tu *TransactionsUpdate) SetGas(u uint32) *TransactionsUpdate {
	tu.mutation.ResetGas()
	tu.mutation.SetGas(u)
	return tu
}

// AddGas adds u to the "Gas" field.
func (tu *TransactionsUpdate) AddGas(u int32) *TransactionsUpdate {
	tu.mutation.AddGas(u)
	return tu
}

// Mutation returns the TransactionsMutation object of the builder.
func (tu *TransactionsUpdate) Mutation() *TransactionsMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransactionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactions.Table,
			Columns: transactions.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactions.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldType,
		})
	}
	if value, ok := tu.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transactions.FieldTime,
		})
	}
	if value, ok := tu.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldTransactionID,
		})
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: transactions.FieldStatus,
		})
	}
	if value, ok := tu.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldSender,
		})
	}
	if value, ok := tu.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldRecipient,
		})
	}
	if tu.mutation.RecipientCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldRecipient,
		})
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactions.FieldAmount,
		})
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactions.FieldAmount,
		})
	}
	if tu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: transactions.FieldAmount,
		})
	}
	if value, ok := tu.mutation.Package(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldPackage,
		})
	}
	if tu.mutation.PackageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldPackage,
		})
	}
	if value, ok := tu.mutation.Module(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldModule,
		})
	}
	if tu.mutation.ModuleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldModule,
		})
	}
	if value, ok := tu.mutation.Function(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldFunction,
		})
	}
	if tu.mutation.FunctionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldFunction,
		})
	}
	if value, ok := tu.mutation.Gas(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transactions.FieldGas,
		})
	}
	if value, ok := tu.mutation.AddedGas(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transactions.FieldGas,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionsUpdateOne is the builder for updating a single Transactions entity.
type TransactionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionsMutation
}

// SetType sets the "Type" field.
func (tuo *TransactionsUpdateOne) SetType(s string) *TransactionsUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetTime sets the "Time" field.
func (tuo *TransactionsUpdateOne) SetTime(t time.Time) *TransactionsUpdateOne {
	tuo.mutation.SetTime(t)
	return tuo
}

// SetTransactionID sets the "TransactionID" field.
func (tuo *TransactionsUpdateOne) SetTransactionID(s string) *TransactionsUpdateOne {
	tuo.mutation.SetTransactionID(s)
	return tuo
}

// SetStatus sets the "Status" field.
func (tuo *TransactionsUpdateOne) SetStatus(b bool) *TransactionsUpdateOne {
	tuo.mutation.SetStatus(b)
	return tuo
}

// SetSender sets the "Sender" field.
func (tuo *TransactionsUpdateOne) SetSender(s string) *TransactionsUpdateOne {
	tuo.mutation.SetSender(s)
	return tuo
}

// SetRecipient sets the "Recipient" field.
func (tuo *TransactionsUpdateOne) SetRecipient(s string) *TransactionsUpdateOne {
	tuo.mutation.SetRecipient(s)
	return tuo
}

// SetNillableRecipient sets the "Recipient" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableRecipient(s *string) *TransactionsUpdateOne {
	if s != nil {
		tuo.SetRecipient(*s)
	}
	return tuo
}

// ClearRecipient clears the value of the "Recipient" field.
func (tuo *TransactionsUpdateOne) ClearRecipient() *TransactionsUpdateOne {
	tuo.mutation.ClearRecipient()
	return tuo
}

// SetAmount sets the "Amount" field.
func (tuo *TransactionsUpdateOne) SetAmount(f float64) *TransactionsUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(f)
	return tuo
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableAmount(f *float64) *TransactionsUpdateOne {
	if f != nil {
		tuo.SetAmount(*f)
	}
	return tuo
}

// AddAmount adds f to the "Amount" field.
func (tuo *TransactionsUpdateOne) AddAmount(f float64) *TransactionsUpdateOne {
	tuo.mutation.AddAmount(f)
	return tuo
}

// ClearAmount clears the value of the "Amount" field.
func (tuo *TransactionsUpdateOne) ClearAmount() *TransactionsUpdateOne {
	tuo.mutation.ClearAmount()
	return tuo
}

// SetPackage sets the "Package" field.
func (tuo *TransactionsUpdateOne) SetPackage(s string) *TransactionsUpdateOne {
	tuo.mutation.SetPackage(s)
	return tuo
}

// SetNillablePackage sets the "Package" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillablePackage(s *string) *TransactionsUpdateOne {
	if s != nil {
		tuo.SetPackage(*s)
	}
	return tuo
}

// ClearPackage clears the value of the "Package" field.
func (tuo *TransactionsUpdateOne) ClearPackage() *TransactionsUpdateOne {
	tuo.mutation.ClearPackage()
	return tuo
}

// SetModule sets the "Module" field.
func (tuo *TransactionsUpdateOne) SetModule(s string) *TransactionsUpdateOne {
	tuo.mutation.SetModule(s)
	return tuo
}

// SetNillableModule sets the "Module" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableModule(s *string) *TransactionsUpdateOne {
	if s != nil {
		tuo.SetModule(*s)
	}
	return tuo
}

// ClearModule clears the value of the "Module" field.
func (tuo *TransactionsUpdateOne) ClearModule() *TransactionsUpdateOne {
	tuo.mutation.ClearModule()
	return tuo
}

// SetFunction sets the "Function" field.
func (tuo *TransactionsUpdateOne) SetFunction(s string) *TransactionsUpdateOne {
	tuo.mutation.SetFunction(s)
	return tuo
}

// SetNillableFunction sets the "Function" field if the given value is not nil.
func (tuo *TransactionsUpdateOne) SetNillableFunction(s *string) *TransactionsUpdateOne {
	if s != nil {
		tuo.SetFunction(*s)
	}
	return tuo
}

// ClearFunction clears the value of the "Function" field.
func (tuo *TransactionsUpdateOne) ClearFunction() *TransactionsUpdateOne {
	tuo.mutation.ClearFunction()
	return tuo
}

// SetGas sets the "Gas" field.
func (tuo *TransactionsUpdateOne) SetGas(u uint32) *TransactionsUpdateOne {
	tuo.mutation.ResetGas()
	tuo.mutation.SetGas(u)
	return tuo
}

// AddGas adds u to the "Gas" field.
func (tuo *TransactionsUpdateOne) AddGas(u int32) *TransactionsUpdateOne {
	tuo.mutation.AddGas(u)
	return tuo
}

// Mutation returns the TransactionsMutation object of the builder.
func (tuo *TransactionsUpdateOne) Mutation() *TransactionsMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionsUpdateOne) Select(field string, fields ...string) *TransactionsUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transactions entity.
func (tuo *TransactionsUpdateOne) Save(ctx context.Context) (*Transactions, error) {
	var (
		err  error
		node *Transactions
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transactions)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionsUpdateOne) SaveX(ctx context.Context) *Transactions {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransactionsUpdateOne) sqlSave(ctx context.Context) (_node *Transactions, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactions.Table,
			Columns: transactions.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transactions.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transactions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactions.FieldID)
		for _, f := range fields {
			if !transactions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldType,
		})
	}
	if value, ok := tuo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transactions.FieldTime,
		})
	}
	if value, ok := tuo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldTransactionID,
		})
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: transactions.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldSender,
		})
	}
	if value, ok := tuo.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldRecipient,
		})
	}
	if tuo.mutation.RecipientCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldRecipient,
		})
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactions.FieldAmount,
		})
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transactions.FieldAmount,
		})
	}
	if tuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: transactions.FieldAmount,
		})
	}
	if value, ok := tuo.mutation.Package(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldPackage,
		})
	}
	if tuo.mutation.PackageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldPackage,
		})
	}
	if value, ok := tuo.mutation.Module(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldModule,
		})
	}
	if tuo.mutation.ModuleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldModule,
		})
	}
	if value, ok := tuo.mutation.Function(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactions.FieldFunction,
		})
	}
	if tuo.mutation.FunctionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transactions.FieldFunction,
		})
	}
	if value, ok := tuo.mutation.Gas(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transactions.FieldGas,
		})
	}
	if value, ok := tuo.mutation.AddedGas(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transactions.FieldGas,
		})
	}
	_node = &Transactions{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
