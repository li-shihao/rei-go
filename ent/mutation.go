// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"rei.io/rei/ent/accounts"
	"rei.io/rei/ent/arguments"
	"rei.io/rei/ent/events"
	"rei.io/rei/ent/nfts"
	"rei.io/rei/ent/objects"
	"rei.io/rei/ent/packages"
	"rei.io/rei/ent/predicate"
	"rei.io/rei/ent/schema"
	"rei.io/rei/ent/transactions"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccounts     = "Accounts"
	TypeArguments    = "Arguments"
	TypeEvents       = "Events"
	TypeNFTs         = "NFTs"
	TypeObjects      = "Objects"
	TypePackages     = "Packages"
	TypeTransactions = "Transactions"
)

// AccountsMutation represents an operation that mutates the Accounts nodes in the graph.
type AccountsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_AccountID    *string
	_Balance      *uint64
	add_Balance   *int64
	_Objects      **schema.AccObject
	_Transactions *[]string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Accounts, error)
	predicates    []predicate.Accounts
}

var _ ent.Mutation = (*AccountsMutation)(nil)

// accountsOption allows management of the mutation configuration using functional options.
type accountsOption func(*AccountsMutation)

// newAccountsMutation creates new mutation for the Accounts entity.
func newAccountsMutation(c config, op Op, opts ...accountsOption) *AccountsMutation {
	m := &AccountsMutation{
		config:        c,
		op:            op,
		typ:           TypeAccounts,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountsID sets the ID field of the mutation.
func withAccountsID(id int) accountsOption {
	return func(m *AccountsMutation) {
		var (
			err   error
			once  sync.Once
			value *Accounts
		)
		m.oldValue = func(ctx context.Context) (*Accounts, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Accounts.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccounts sets the old Accounts of the mutation.
func withAccounts(node *Accounts) accountsOption {
	return func(m *AccountsMutation) {
		m.oldValue = func(context.Context) (*Accounts, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Accounts.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccountID sets the "AccountID" field.
func (m *AccountsMutation) SetAccountID(s string) {
	m._AccountID = &s
}

// AccountID returns the value of the "AccountID" field in the mutation.
func (m *AccountsMutation) AccountID() (r string, exists bool) {
	v := m._AccountID
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "AccountID" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "AccountID" field.
func (m *AccountsMutation) ResetAccountID() {
	m._AccountID = nil
}

// SetBalance sets the "Balance" field.
func (m *AccountsMutation) SetBalance(u uint64) {
	m._Balance = &u
	m.add_Balance = nil
}

// Balance returns the value of the "Balance" field in the mutation.
func (m *AccountsMutation) Balance() (r uint64, exists bool) {
	v := m._Balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "Balance" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldBalance(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds u to the "Balance" field.
func (m *AccountsMutation) AddBalance(u int64) {
	if m.add_Balance != nil {
		*m.add_Balance += u
	} else {
		m.add_Balance = &u
	}
}

// AddedBalance returns the value that was added to the "Balance" field in this mutation.
func (m *AccountsMutation) AddedBalance() (r int64, exists bool) {
	v := m.add_Balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "Balance" field.
func (m *AccountsMutation) ResetBalance() {
	m._Balance = nil
	m.add_Balance = nil
}

// SetObjects sets the "Objects" field.
func (m *AccountsMutation) SetObjects(so *schema.AccObject) {
	m._Objects = &so
}

// Objects returns the value of the "Objects" field in the mutation.
func (m *AccountsMutation) Objects() (r *schema.AccObject, exists bool) {
	v := m._Objects
	if v == nil {
		return
	}
	return *v, true
}

// OldObjects returns the old "Objects" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldObjects(ctx context.Context) (v *schema.AccObject, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjects is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjects requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjects: %w", err)
	}
	return oldValue.Objects, nil
}

// ResetObjects resets all changes to the "Objects" field.
func (m *AccountsMutation) ResetObjects() {
	m._Objects = nil
}

// SetTransactions sets the "Transactions" field.
func (m *AccountsMutation) SetTransactions(s []string) {
	m._Transactions = &s
}

// Transactions returns the value of the "Transactions" field in the mutation.
func (m *AccountsMutation) Transactions() (r []string, exists bool) {
	v := m._Transactions
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactions returns the old "Transactions" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldTransactions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactions: %w", err)
	}
	return oldValue.Transactions, nil
}

// ResetTransactions resets all changes to the "Transactions" field.
func (m *AccountsMutation) ResetTransactions() {
	m._Transactions = nil
}

// Where appends a list predicates to the AccountsMutation builder.
func (m *AccountsMutation) Where(ps ...predicate.Accounts) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccountsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Accounts).
func (m *AccountsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._AccountID != nil {
		fields = append(fields, accounts.FieldAccountID)
	}
	if m._Balance != nil {
		fields = append(fields, accounts.FieldBalance)
	}
	if m._Objects != nil {
		fields = append(fields, accounts.FieldObjects)
	}
	if m._Transactions != nil {
		fields = append(fields, accounts.FieldTransactions)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case accounts.FieldAccountID:
		return m.AccountID()
	case accounts.FieldBalance:
		return m.Balance()
	case accounts.FieldObjects:
		return m.Objects()
	case accounts.FieldTransactions:
		return m.Transactions()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case accounts.FieldAccountID:
		return m.OldAccountID(ctx)
	case accounts.FieldBalance:
		return m.OldBalance(ctx)
	case accounts.FieldObjects:
		return m.OldObjects(ctx)
	case accounts.FieldTransactions:
		return m.OldTransactions(ctx)
	}
	return nil, fmt.Errorf("unknown Accounts field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case accounts.FieldAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case accounts.FieldBalance:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case accounts.FieldObjects:
		v, ok := value.(*schema.AccObject)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjects(v)
		return nil
	case accounts.FieldTransactions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactions(v)
		return nil
	}
	return fmt.Errorf("unknown Accounts field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountsMutation) AddedFields() []string {
	var fields []string
	if m.add_Balance != nil {
		fields = append(fields, accounts.FieldBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case accounts.FieldBalance:
		return m.AddedBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case accounts.FieldBalance:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	}
	return fmt.Errorf("unknown Accounts numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Accounts nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountsMutation) ResetField(name string) error {
	switch name {
	case accounts.FieldAccountID:
		m.ResetAccountID()
		return nil
	case accounts.FieldBalance:
		m.ResetBalance()
		return nil
	case accounts.FieldObjects:
		m.ResetObjects()
		return nil
	case accounts.FieldTransactions:
		m.ResetTransactions()
		return nil
	}
	return fmt.Errorf("unknown Accounts field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Accounts unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Accounts edge %s", name)
}

// ArgumentsMutation represents an operation that mutates the Arguments nodes in the graph.
type ArgumentsMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Name          *string
	_Type          *string
	_TransactionID *string
	_Data          *[]interface{}
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Arguments, error)
	predicates     []predicate.Arguments
}

var _ ent.Mutation = (*ArgumentsMutation)(nil)

// argumentsOption allows management of the mutation configuration using functional options.
type argumentsOption func(*ArgumentsMutation)

// newArgumentsMutation creates new mutation for the Arguments entity.
func newArgumentsMutation(c config, op Op, opts ...argumentsOption) *ArgumentsMutation {
	m := &ArgumentsMutation{
		config:        c,
		op:            op,
		typ:           TypeArguments,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArgumentsID sets the ID field of the mutation.
func withArgumentsID(id int) argumentsOption {
	return func(m *ArgumentsMutation) {
		var (
			err   error
			once  sync.Once
			value *Arguments
		)
		m.oldValue = func(ctx context.Context) (*Arguments, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Arguments.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArguments sets the old Arguments of the mutation.
func withArguments(node *Arguments) argumentsOption {
	return func(m *ArgumentsMutation) {
		m.oldValue = func(context.Context) (*Arguments, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArgumentsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArgumentsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArgumentsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArgumentsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Arguments.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *ArgumentsMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *ArgumentsMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Arguments entity.
// If the Arguments object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArgumentsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *ArgumentsMutation) ResetName() {
	m._Name = nil
}

// SetType sets the "Type" field.
func (m *ArgumentsMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *ArgumentsMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the Arguments entity.
// If the Arguments object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArgumentsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *ArgumentsMutation) ResetType() {
	m._Type = nil
}

// SetTransactionID sets the "TransactionID" field.
func (m *ArgumentsMutation) SetTransactionID(s string) {
	m._TransactionID = &s
}

// TransactionID returns the value of the "TransactionID" field in the mutation.
func (m *ArgumentsMutation) TransactionID() (r string, exists bool) {
	v := m._TransactionID
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionID returns the old "TransactionID" field's value of the Arguments entity.
// If the Arguments object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArgumentsMutation) OldTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionID: %w", err)
	}
	return oldValue.TransactionID, nil
}

// ResetTransactionID resets all changes to the "TransactionID" field.
func (m *ArgumentsMutation) ResetTransactionID() {
	m._TransactionID = nil
}

// SetData sets the "Data" field.
func (m *ArgumentsMutation) SetData(i []interface{}) {
	m._Data = &i
}

// Data returns the value of the "Data" field in the mutation.
func (m *ArgumentsMutation) Data() (r []interface{}, exists bool) {
	v := m._Data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "Data" field's value of the Arguments entity.
// If the Arguments object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArgumentsMutation) OldData(ctx context.Context) (v []interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "Data" field.
func (m *ArgumentsMutation) ResetData() {
	m._Data = nil
}

// Where appends a list predicates to the ArgumentsMutation builder.
func (m *ArgumentsMutation) Where(ps ...predicate.Arguments) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ArgumentsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Arguments).
func (m *ArgumentsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArgumentsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Name != nil {
		fields = append(fields, arguments.FieldName)
	}
	if m._Type != nil {
		fields = append(fields, arguments.FieldType)
	}
	if m._TransactionID != nil {
		fields = append(fields, arguments.FieldTransactionID)
	}
	if m._Data != nil {
		fields = append(fields, arguments.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArgumentsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case arguments.FieldName:
		return m.Name()
	case arguments.FieldType:
		return m.GetType()
	case arguments.FieldTransactionID:
		return m.TransactionID()
	case arguments.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArgumentsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case arguments.FieldName:
		return m.OldName(ctx)
	case arguments.FieldType:
		return m.OldType(ctx)
	case arguments.FieldTransactionID:
		return m.OldTransactionID(ctx)
	case arguments.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown Arguments field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArgumentsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case arguments.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case arguments.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case arguments.FieldTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionID(v)
		return nil
	case arguments.FieldData:
		v, ok := value.([]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown Arguments field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArgumentsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArgumentsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArgumentsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Arguments numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArgumentsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArgumentsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArgumentsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Arguments nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArgumentsMutation) ResetField(name string) error {
	switch name {
	case arguments.FieldName:
		m.ResetName()
		return nil
	case arguments.FieldType:
		m.ResetType()
		return nil
	case arguments.FieldTransactionID:
		m.ResetTransactionID()
		return nil
	case arguments.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown Arguments field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArgumentsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArgumentsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArgumentsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArgumentsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArgumentsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArgumentsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArgumentsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Arguments unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArgumentsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Arguments edge %s", name)
}

// EventsMutation represents an operation that mutates the Events nodes in the graph.
type EventsMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Type          *string
	_Sender        *string
	_Recipient     *string
	_TransactionID *string
	_ObjectID      *string
	_Version       *uint32
	add_Version    *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Events, error)
	predicates     []predicate.Events
}

var _ ent.Mutation = (*EventsMutation)(nil)

// eventsOption allows management of the mutation configuration using functional options.
type eventsOption func(*EventsMutation)

// newEventsMutation creates new mutation for the Events entity.
func newEventsMutation(c config, op Op, opts ...eventsOption) *EventsMutation {
	m := &EventsMutation{
		config:        c,
		op:            op,
		typ:           TypeEvents,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventsID sets the ID field of the mutation.
func withEventsID(id int) eventsOption {
	return func(m *EventsMutation) {
		var (
			err   error
			once  sync.Once
			value *Events
		)
		m.oldValue = func(ctx context.Context) (*Events, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Events.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvents sets the old Events of the mutation.
func withEvents(node *Events) eventsOption {
	return func(m *EventsMutation) {
		m.oldValue = func(context.Context) (*Events, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Events.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "Type" field.
func (m *EventsMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *EventsMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *EventsMutation) ResetType() {
	m._Type = nil
}

// SetSender sets the "Sender" field.
func (m *EventsMutation) SetSender(s string) {
	m._Sender = &s
}

// Sender returns the value of the "Sender" field in the mutation.
func (m *EventsMutation) Sender() (r string, exists bool) {
	v := m._Sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "Sender" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ResetSender resets all changes to the "Sender" field.
func (m *EventsMutation) ResetSender() {
	m._Sender = nil
}

// SetRecipient sets the "Recipient" field.
func (m *EventsMutation) SetRecipient(s string) {
	m._Recipient = &s
}

// Recipient returns the value of the "Recipient" field in the mutation.
func (m *EventsMutation) Recipient() (r string, exists bool) {
	v := m._Recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "Recipient" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "Recipient" field.
func (m *EventsMutation) ResetRecipient() {
	m._Recipient = nil
}

// SetTransactionID sets the "TransactionID" field.
func (m *EventsMutation) SetTransactionID(s string) {
	m._TransactionID = &s
}

// TransactionID returns the value of the "TransactionID" field in the mutation.
func (m *EventsMutation) TransactionID() (r string, exists bool) {
	v := m._TransactionID
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionID returns the old "TransactionID" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionID: %w", err)
	}
	return oldValue.TransactionID, nil
}

// ResetTransactionID resets all changes to the "TransactionID" field.
func (m *EventsMutation) ResetTransactionID() {
	m._TransactionID = nil
}

// SetObjectID sets the "ObjectID" field.
func (m *EventsMutation) SetObjectID(s string) {
	m._ObjectID = &s
}

// ObjectID returns the value of the "ObjectID" field in the mutation.
func (m *EventsMutation) ObjectID() (r string, exists bool) {
	v := m._ObjectID
	if v == nil {
		return
	}
	return *v, true
}

// OldObjectID returns the old "ObjectID" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldObjectID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjectID: %w", err)
	}
	return oldValue.ObjectID, nil
}

// ResetObjectID resets all changes to the "ObjectID" field.
func (m *EventsMutation) ResetObjectID() {
	m._ObjectID = nil
}

// SetVersion sets the "Version" field.
func (m *EventsMutation) SetVersion(u uint32) {
	m._Version = &u
	m.add_Version = nil
}

// Version returns the value of the "Version" field in the mutation.
func (m *EventsMutation) Version() (r uint32, exists bool) {
	v := m._Version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "Version" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldVersion(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "Version" field.
func (m *EventsMutation) AddVersion(u int32) {
	if m.add_Version != nil {
		*m.add_Version += u
	} else {
		m.add_Version = &u
	}
}

// AddedVersion returns the value that was added to the "Version" field in this mutation.
func (m *EventsMutation) AddedVersion() (r int32, exists bool) {
	v := m.add_Version
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "Version" field.
func (m *EventsMutation) ResetVersion() {
	m._Version = nil
	m.add_Version = nil
}

// Where appends a list predicates to the EventsMutation builder.
func (m *EventsMutation) Where(ps ...predicate.Events) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Events).
func (m *EventsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._Type != nil {
		fields = append(fields, events.FieldType)
	}
	if m._Sender != nil {
		fields = append(fields, events.FieldSender)
	}
	if m._Recipient != nil {
		fields = append(fields, events.FieldRecipient)
	}
	if m._TransactionID != nil {
		fields = append(fields, events.FieldTransactionID)
	}
	if m._ObjectID != nil {
		fields = append(fields, events.FieldObjectID)
	}
	if m._Version != nil {
		fields = append(fields, events.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case events.FieldType:
		return m.GetType()
	case events.FieldSender:
		return m.Sender()
	case events.FieldRecipient:
		return m.Recipient()
	case events.FieldTransactionID:
		return m.TransactionID()
	case events.FieldObjectID:
		return m.ObjectID()
	case events.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case events.FieldType:
		return m.OldType(ctx)
	case events.FieldSender:
		return m.OldSender(ctx)
	case events.FieldRecipient:
		return m.OldRecipient(ctx)
	case events.FieldTransactionID:
		return m.OldTransactionID(ctx)
	case events.FieldObjectID:
		return m.OldObjectID(ctx)
	case events.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown Events field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case events.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case events.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case events.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case events.FieldTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionID(v)
		return nil
	case events.FieldObjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectID(v)
		return nil
	case events.FieldVersion:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Events field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventsMutation) AddedFields() []string {
	var fields []string
	if m.add_Version != nil {
		fields = append(fields, events.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case events.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case events.FieldVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Events numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Events nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventsMutation) ResetField(name string) error {
	switch name {
	case events.FieldType:
		m.ResetType()
		return nil
	case events.FieldSender:
		m.ResetSender()
		return nil
	case events.FieldRecipient:
		m.ResetRecipient()
		return nil
	case events.FieldTransactionID:
		m.ResetTransactionID()
		return nil
	case events.FieldObjectID:
		m.ResetObjectID()
		return nil
	case events.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown Events field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Events unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Events edge %s", name)
}

// NFTsMutation represents an operation that mutates the NFTs nodes in the graph.
type NFTsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_ObjectID     *string
	_Type         *string
	_Metadata     *map[string]interface{}
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NFTs, error)
	predicates    []predicate.NFTs
}

var _ ent.Mutation = (*NFTsMutation)(nil)

// nftsOption allows management of the mutation configuration using functional options.
type nftsOption func(*NFTsMutation)

// newNFTsMutation creates new mutation for the NFTs entity.
func newNFTsMutation(c config, op Op, opts ...nftsOption) *NFTsMutation {
	m := &NFTsMutation{
		config:        c,
		op:            op,
		typ:           TypeNFTs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNFTsID sets the ID field of the mutation.
func withNFTsID(id int) nftsOption {
	return func(m *NFTsMutation) {
		var (
			err   error
			once  sync.Once
			value *NFTs
		)
		m.oldValue = func(ctx context.Context) (*NFTs, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NFTs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNFTs sets the old NFTs of the mutation.
func withNFTs(node *NFTs) nftsOption {
	return func(m *NFTsMutation) {
		m.oldValue = func(context.Context) (*NFTs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NFTsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NFTsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NFTsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NFTsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NFTs.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetObjectID sets the "ObjectID" field.
func (m *NFTsMutation) SetObjectID(s string) {
	m._ObjectID = &s
}

// ObjectID returns the value of the "ObjectID" field in the mutation.
func (m *NFTsMutation) ObjectID() (r string, exists bool) {
	v := m._ObjectID
	if v == nil {
		return
	}
	return *v, true
}

// OldObjectID returns the old "ObjectID" field's value of the NFTs entity.
// If the NFTs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NFTsMutation) OldObjectID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjectID: %w", err)
	}
	return oldValue.ObjectID, nil
}

// ResetObjectID resets all changes to the "ObjectID" field.
func (m *NFTsMutation) ResetObjectID() {
	m._ObjectID = nil
}

// SetType sets the "Type" field.
func (m *NFTsMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *NFTsMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the NFTs entity.
// If the NFTs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NFTsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *NFTsMutation) ResetType() {
	m._Type = nil
}

// SetMetadata sets the "Metadata" field.
func (m *NFTsMutation) SetMetadata(value map[string]interface{}) {
	m._Metadata = &value
}

// Metadata returns the value of the "Metadata" field in the mutation.
func (m *NFTsMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m._Metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "Metadata" field's value of the NFTs entity.
// If the NFTs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NFTsMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "Metadata" field.
func (m *NFTsMutation) ResetMetadata() {
	m._Metadata = nil
}

// Where appends a list predicates to the NFTsMutation builder.
func (m *NFTsMutation) Where(ps ...predicate.NFTs) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NFTsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NFTs).
func (m *NFTsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NFTsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._ObjectID != nil {
		fields = append(fields, nfts.FieldObjectID)
	}
	if m._Type != nil {
		fields = append(fields, nfts.FieldType)
	}
	if m._Metadata != nil {
		fields = append(fields, nfts.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NFTsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nfts.FieldObjectID:
		return m.ObjectID()
	case nfts.FieldType:
		return m.GetType()
	case nfts.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NFTsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nfts.FieldObjectID:
		return m.OldObjectID(ctx)
	case nfts.FieldType:
		return m.OldType(ctx)
	case nfts.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown NFTs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NFTsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nfts.FieldObjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectID(v)
		return nil
	case nfts.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case nfts.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown NFTs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NFTsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NFTsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NFTsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NFTs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NFTsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NFTsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NFTsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NFTs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NFTsMutation) ResetField(name string) error {
	switch name {
	case nfts.FieldObjectID:
		m.ResetObjectID()
		return nil
	case nfts.FieldType:
		m.ResetType()
		return nil
	case nfts.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown NFTs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NFTsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NFTsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NFTsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NFTsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NFTsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NFTsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NFTsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NFTs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NFTsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NFTs edge %s", name)
}

// ObjectsMutation represents an operation that mutates the Objects nodes in the graph.
type ObjectsMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Status              *string
	_DataType            *string
	_Type                *string
	_Has_public_transfer *bool
	_Fields              *map[string]interface{}
	_Owner               *string
	_StorageRebate       *float64
	add_StorageRebate    *float64
	_ObjectID            *string
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Objects, error)
	predicates           []predicate.Objects
}

var _ ent.Mutation = (*ObjectsMutation)(nil)

// objectsOption allows management of the mutation configuration using functional options.
type objectsOption func(*ObjectsMutation)

// newObjectsMutation creates new mutation for the Objects entity.
func newObjectsMutation(c config, op Op, opts ...objectsOption) *ObjectsMutation {
	m := &ObjectsMutation{
		config:        c,
		op:            op,
		typ:           TypeObjects,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withObjectsID sets the ID field of the mutation.
func withObjectsID(id int) objectsOption {
	return func(m *ObjectsMutation) {
		var (
			err   error
			once  sync.Once
			value *Objects
		)
		m.oldValue = func(ctx context.Context) (*Objects, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Objects.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withObjects sets the old Objects of the mutation.
func withObjects(node *Objects) objectsOption {
	return func(m *ObjectsMutation) {
		m.oldValue = func(context.Context) (*Objects, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ObjectsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ObjectsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ObjectsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ObjectsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Objects.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "Status" field.
func (m *ObjectsMutation) SetStatus(s string) {
	m._Status = &s
}

// Status returns the value of the "Status" field in the mutation.
func (m *ObjectsMutation) Status() (r string, exists bool) {
	v := m._Status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "Status" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "Status" field.
func (m *ObjectsMutation) ResetStatus() {
	m._Status = nil
}

// SetDataType sets the "DataType" field.
func (m *ObjectsMutation) SetDataType(s string) {
	m._DataType = &s
}

// DataType returns the value of the "DataType" field in the mutation.
func (m *ObjectsMutation) DataType() (r string, exists bool) {
	v := m._DataType
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "DataType" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldDataType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "DataType" field.
func (m *ObjectsMutation) ResetDataType() {
	m._DataType = nil
}

// SetType sets the "Type" field.
func (m *ObjectsMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *ObjectsMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *ObjectsMutation) ResetType() {
	m._Type = nil
}

// SetHasPublicTransfer sets the "Has_public_transfer" field.
func (m *ObjectsMutation) SetHasPublicTransfer(b bool) {
	m._Has_public_transfer = &b
}

// HasPublicTransfer returns the value of the "Has_public_transfer" field in the mutation.
func (m *ObjectsMutation) HasPublicTransfer() (r bool, exists bool) {
	v := m._Has_public_transfer
	if v == nil {
		return
	}
	return *v, true
}

// OldHasPublicTransfer returns the old "Has_public_transfer" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldHasPublicTransfer(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasPublicTransfer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasPublicTransfer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasPublicTransfer: %w", err)
	}
	return oldValue.HasPublicTransfer, nil
}

// ResetHasPublicTransfer resets all changes to the "Has_public_transfer" field.
func (m *ObjectsMutation) ResetHasPublicTransfer() {
	m._Has_public_transfer = nil
}

// SetFields sets the "Fields" field.
func (m *ObjectsMutation) SetFields(value map[string]interface{}) {
	m._Fields = &value
}

// GetFields returns the value of the "Fields" field in the mutation.
func (m *ObjectsMutation) GetFields() (r map[string]interface{}, exists bool) {
	v := m._Fields
	if v == nil {
		return
	}
	return *v, true
}

// OldFields returns the old "Fields" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldFields(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFields is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFields requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFields: %w", err)
	}
	return oldValue.Fields, nil
}

// ResetFields resets all changes to the "Fields" field.
func (m *ObjectsMutation) ResetFields() {
	m._Fields = nil
}

// SetOwner sets the "Owner" field.
func (m *ObjectsMutation) SetOwner(s string) {
	m._Owner = &s
}

// Owner returns the value of the "Owner" field in the mutation.
func (m *ObjectsMutation) Owner() (r string, exists bool) {
	v := m._Owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "Owner" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "Owner" field.
func (m *ObjectsMutation) ResetOwner() {
	m._Owner = nil
}

// SetStorageRebate sets the "StorageRebate" field.
func (m *ObjectsMutation) SetStorageRebate(f float64) {
	m._StorageRebate = &f
	m.add_StorageRebate = nil
}

// StorageRebate returns the value of the "StorageRebate" field in the mutation.
func (m *ObjectsMutation) StorageRebate() (r float64, exists bool) {
	v := m._StorageRebate
	if v == nil {
		return
	}
	return *v, true
}

// OldStorageRebate returns the old "StorageRebate" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldStorageRebate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorageRebate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorageRebate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorageRebate: %w", err)
	}
	return oldValue.StorageRebate, nil
}

// AddStorageRebate adds f to the "StorageRebate" field.
func (m *ObjectsMutation) AddStorageRebate(f float64) {
	if m.add_StorageRebate != nil {
		*m.add_StorageRebate += f
	} else {
		m.add_StorageRebate = &f
	}
}

// AddedStorageRebate returns the value that was added to the "StorageRebate" field in this mutation.
func (m *ObjectsMutation) AddedStorageRebate() (r float64, exists bool) {
	v := m.add_StorageRebate
	if v == nil {
		return
	}
	return *v, true
}

// ResetStorageRebate resets all changes to the "StorageRebate" field.
func (m *ObjectsMutation) ResetStorageRebate() {
	m._StorageRebate = nil
	m.add_StorageRebate = nil
}

// SetObjectID sets the "ObjectID" field.
func (m *ObjectsMutation) SetObjectID(s string) {
	m._ObjectID = &s
}

// ObjectID returns the value of the "ObjectID" field in the mutation.
func (m *ObjectsMutation) ObjectID() (r string, exists bool) {
	v := m._ObjectID
	if v == nil {
		return
	}
	return *v, true
}

// OldObjectID returns the old "ObjectID" field's value of the Objects entity.
// If the Objects object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ObjectsMutation) OldObjectID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjectID: %w", err)
	}
	return oldValue.ObjectID, nil
}

// ResetObjectID resets all changes to the "ObjectID" field.
func (m *ObjectsMutation) ResetObjectID() {
	m._ObjectID = nil
}

// Where appends a list predicates to the ObjectsMutation builder.
func (m *ObjectsMutation) Where(ps ...predicate.Objects) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ObjectsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Objects).
func (m *ObjectsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ObjectsMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m._Status != nil {
		fields = append(fields, objects.FieldStatus)
	}
	if m._DataType != nil {
		fields = append(fields, objects.FieldDataType)
	}
	if m._Type != nil {
		fields = append(fields, objects.FieldType)
	}
	if m._Has_public_transfer != nil {
		fields = append(fields, objects.FieldHasPublicTransfer)
	}
	if m._Fields != nil {
		fields = append(fields, objects.FieldFields)
	}
	if m._Owner != nil {
		fields = append(fields, objects.FieldOwner)
	}
	if m._StorageRebate != nil {
		fields = append(fields, objects.FieldStorageRebate)
	}
	if m._ObjectID != nil {
		fields = append(fields, objects.FieldObjectID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ObjectsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case objects.FieldStatus:
		return m.Status()
	case objects.FieldDataType:
		return m.DataType()
	case objects.FieldType:
		return m.GetType()
	case objects.FieldHasPublicTransfer:
		return m.HasPublicTransfer()
	case objects.FieldFields:
		return m.GetFields()
	case objects.FieldOwner:
		return m.Owner()
	case objects.FieldStorageRebate:
		return m.StorageRebate()
	case objects.FieldObjectID:
		return m.ObjectID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ObjectsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case objects.FieldStatus:
		return m.OldStatus(ctx)
	case objects.FieldDataType:
		return m.OldDataType(ctx)
	case objects.FieldType:
		return m.OldType(ctx)
	case objects.FieldHasPublicTransfer:
		return m.OldHasPublicTransfer(ctx)
	case objects.FieldFields:
		return m.OldFields(ctx)
	case objects.FieldOwner:
		return m.OldOwner(ctx)
	case objects.FieldStorageRebate:
		return m.OldStorageRebate(ctx)
	case objects.FieldObjectID:
		return m.OldObjectID(ctx)
	}
	return nil, fmt.Errorf("unknown Objects field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ObjectsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case objects.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case objects.FieldDataType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case objects.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case objects.FieldHasPublicTransfer:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasPublicTransfer(v)
		return nil
	case objects.FieldFields:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFields(v)
		return nil
	case objects.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case objects.FieldStorageRebate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorageRebate(v)
		return nil
	case objects.FieldObjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectID(v)
		return nil
	}
	return fmt.Errorf("unknown Objects field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ObjectsMutation) AddedFields() []string {
	var fields []string
	if m.add_StorageRebate != nil {
		fields = append(fields, objects.FieldStorageRebate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ObjectsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case objects.FieldStorageRebate:
		return m.AddedStorageRebate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ObjectsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case objects.FieldStorageRebate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStorageRebate(v)
		return nil
	}
	return fmt.Errorf("unknown Objects numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ObjectsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ObjectsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ObjectsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Objects nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ObjectsMutation) ResetField(name string) error {
	switch name {
	case objects.FieldStatus:
		m.ResetStatus()
		return nil
	case objects.FieldDataType:
		m.ResetDataType()
		return nil
	case objects.FieldType:
		m.ResetType()
		return nil
	case objects.FieldHasPublicTransfer:
		m.ResetHasPublicTransfer()
		return nil
	case objects.FieldFields:
		m.ResetFields()
		return nil
	case objects.FieldOwner:
		m.ResetOwner()
		return nil
	case objects.FieldStorageRebate:
		m.ResetStorageRebate()
		return nil
	case objects.FieldObjectID:
		m.ResetObjectID()
		return nil
	}
	return fmt.Errorf("unknown Objects field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ObjectsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ObjectsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ObjectsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ObjectsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ObjectsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ObjectsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ObjectsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Objects unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ObjectsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Objects edge %s", name)
}

// PackagesMutation represents an operation that mutates the Packages nodes in the graph.
type PackagesMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_TransactionID *string
	_ObjectID      *string
	_Bytecode      *map[string]interface{}
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Packages, error)
	predicates     []predicate.Packages
}

var _ ent.Mutation = (*PackagesMutation)(nil)

// packagesOption allows management of the mutation configuration using functional options.
type packagesOption func(*PackagesMutation)

// newPackagesMutation creates new mutation for the Packages entity.
func newPackagesMutation(c config, op Op, opts ...packagesOption) *PackagesMutation {
	m := &PackagesMutation{
		config:        c,
		op:            op,
		typ:           TypePackages,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPackagesID sets the ID field of the mutation.
func withPackagesID(id int) packagesOption {
	return func(m *PackagesMutation) {
		var (
			err   error
			once  sync.Once
			value *Packages
		)
		m.oldValue = func(ctx context.Context) (*Packages, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Packages.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPackages sets the old Packages of the mutation.
func withPackages(node *Packages) packagesOption {
	return func(m *PackagesMutation) {
		m.oldValue = func(context.Context) (*Packages, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PackagesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PackagesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PackagesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PackagesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Packages.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTransactionID sets the "TransactionID" field.
func (m *PackagesMutation) SetTransactionID(s string) {
	m._TransactionID = &s
}

// TransactionID returns the value of the "TransactionID" field in the mutation.
func (m *PackagesMutation) TransactionID() (r string, exists bool) {
	v := m._TransactionID
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionID returns the old "TransactionID" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionID: %w", err)
	}
	return oldValue.TransactionID, nil
}

// ResetTransactionID resets all changes to the "TransactionID" field.
func (m *PackagesMutation) ResetTransactionID() {
	m._TransactionID = nil
}

// SetObjectID sets the "ObjectID" field.
func (m *PackagesMutation) SetObjectID(s string) {
	m._ObjectID = &s
}

// ObjectID returns the value of the "ObjectID" field in the mutation.
func (m *PackagesMutation) ObjectID() (r string, exists bool) {
	v := m._ObjectID
	if v == nil {
		return
	}
	return *v, true
}

// OldObjectID returns the old "ObjectID" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldObjectID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObjectID: %w", err)
	}
	return oldValue.ObjectID, nil
}

// ResetObjectID resets all changes to the "ObjectID" field.
func (m *PackagesMutation) ResetObjectID() {
	m._ObjectID = nil
}

// SetBytecode sets the "Bytecode" field.
func (m *PackagesMutation) SetBytecode(value map[string]interface{}) {
	m._Bytecode = &value
}

// Bytecode returns the value of the "Bytecode" field in the mutation.
func (m *PackagesMutation) Bytecode() (r map[string]interface{}, exists bool) {
	v := m._Bytecode
	if v == nil {
		return
	}
	return *v, true
}

// OldBytecode returns the old "Bytecode" field's value of the Packages entity.
// If the Packages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PackagesMutation) OldBytecode(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBytecode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBytecode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBytecode: %w", err)
	}
	return oldValue.Bytecode, nil
}

// ResetBytecode resets all changes to the "Bytecode" field.
func (m *PackagesMutation) ResetBytecode() {
	m._Bytecode = nil
}

// Where appends a list predicates to the PackagesMutation builder.
func (m *PackagesMutation) Where(ps ...predicate.Packages) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PackagesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Packages).
func (m *PackagesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PackagesMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._TransactionID != nil {
		fields = append(fields, packages.FieldTransactionID)
	}
	if m._ObjectID != nil {
		fields = append(fields, packages.FieldObjectID)
	}
	if m._Bytecode != nil {
		fields = append(fields, packages.FieldBytecode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PackagesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case packages.FieldTransactionID:
		return m.TransactionID()
	case packages.FieldObjectID:
		return m.ObjectID()
	case packages.FieldBytecode:
		return m.Bytecode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PackagesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case packages.FieldTransactionID:
		return m.OldTransactionID(ctx)
	case packages.FieldObjectID:
		return m.OldObjectID(ctx)
	case packages.FieldBytecode:
		return m.OldBytecode(ctx)
	}
	return nil, fmt.Errorf("unknown Packages field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PackagesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case packages.FieldTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionID(v)
		return nil
	case packages.FieldObjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObjectID(v)
		return nil
	case packages.FieldBytecode:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBytecode(v)
		return nil
	}
	return fmt.Errorf("unknown Packages field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PackagesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PackagesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PackagesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Packages numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PackagesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PackagesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PackagesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Packages nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PackagesMutation) ResetField(name string) error {
	switch name {
	case packages.FieldTransactionID:
		m.ResetTransactionID()
		return nil
	case packages.FieldObjectID:
		m.ResetObjectID()
		return nil
	case packages.FieldBytecode:
		m.ResetBytecode()
		return nil
	}
	return fmt.Errorf("unknown Packages field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PackagesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PackagesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PackagesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PackagesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PackagesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PackagesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PackagesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Packages unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PackagesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Packages edge %s", name)
}

// TransactionsMutation represents an operation that mutates the Transactions nodes in the graph.
type TransactionsMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Type          *string
	_Time          *time.Time
	_TransactionID *string
	_Status        *bool
	_Sender        *string
	_Recipient     *string
	_Amount        *float64
	add_Amount     *float64
	_Package       *string
	_Module        *string
	_Function      *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Transactions, error)
	predicates     []predicate.Transactions
}

var _ ent.Mutation = (*TransactionsMutation)(nil)

// transactionsOption allows management of the mutation configuration using functional options.
type transactionsOption func(*TransactionsMutation)

// newTransactionsMutation creates new mutation for the Transactions entity.
func newTransactionsMutation(c config, op Op, opts ...transactionsOption) *TransactionsMutation {
	m := &TransactionsMutation{
		config:        c,
		op:            op,
		typ:           TypeTransactions,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionsID sets the ID field of the mutation.
func withTransactionsID(id int) transactionsOption {
	return func(m *TransactionsMutation) {
		var (
			err   error
			once  sync.Once
			value *Transactions
		)
		m.oldValue = func(ctx context.Context) (*Transactions, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transactions.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransactions sets the old Transactions of the mutation.
func withTransactions(node *Transactions) transactionsOption {
	return func(m *TransactionsMutation) {
		m.oldValue = func(context.Context) (*Transactions, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transactions.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "Type" field.
func (m *TransactionsMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *TransactionsMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *TransactionsMutation) ResetType() {
	m._Type = nil
}

// SetTime sets the "Time" field.
func (m *TransactionsMutation) SetTime(t time.Time) {
	m._Time = &t
}

// Time returns the value of the "Time" field in the mutation.
func (m *TransactionsMutation) Time() (r time.Time, exists bool) {
	v := m._Time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "Time" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "Time" field.
func (m *TransactionsMutation) ResetTime() {
	m._Time = nil
}

// SetTransactionID sets the "TransactionID" field.
func (m *TransactionsMutation) SetTransactionID(s string) {
	m._TransactionID = &s
}

// TransactionID returns the value of the "TransactionID" field in the mutation.
func (m *TransactionsMutation) TransactionID() (r string, exists bool) {
	v := m._TransactionID
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionID returns the old "TransactionID" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionID: %w", err)
	}
	return oldValue.TransactionID, nil
}

// ResetTransactionID resets all changes to the "TransactionID" field.
func (m *TransactionsMutation) ResetTransactionID() {
	m._TransactionID = nil
}

// SetStatus sets the "Status" field.
func (m *TransactionsMutation) SetStatus(b bool) {
	m._Status = &b
}

// Status returns the value of the "Status" field in the mutation.
func (m *TransactionsMutation) Status() (r bool, exists bool) {
	v := m._Status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "Status" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "Status" field.
func (m *TransactionsMutation) ResetStatus() {
	m._Status = nil
}

// SetSender sets the "Sender" field.
func (m *TransactionsMutation) SetSender(s string) {
	m._Sender = &s
}

// Sender returns the value of the "Sender" field in the mutation.
func (m *TransactionsMutation) Sender() (r string, exists bool) {
	v := m._Sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "Sender" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ResetSender resets all changes to the "Sender" field.
func (m *TransactionsMutation) ResetSender() {
	m._Sender = nil
}

// SetRecipient sets the "Recipient" field.
func (m *TransactionsMutation) SetRecipient(s string) {
	m._Recipient = &s
}

// Recipient returns the value of the "Recipient" field in the mutation.
func (m *TransactionsMutation) Recipient() (r string, exists bool) {
	v := m._Recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "Recipient" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ClearRecipient clears the value of the "Recipient" field.
func (m *TransactionsMutation) ClearRecipient() {
	m._Recipient = nil
	m.clearedFields[transactions.FieldRecipient] = struct{}{}
}

// RecipientCleared returns if the "Recipient" field was cleared in this mutation.
func (m *TransactionsMutation) RecipientCleared() bool {
	_, ok := m.clearedFields[transactions.FieldRecipient]
	return ok
}

// ResetRecipient resets all changes to the "Recipient" field.
func (m *TransactionsMutation) ResetRecipient() {
	m._Recipient = nil
	delete(m.clearedFields, transactions.FieldRecipient)
}

// SetAmount sets the "Amount" field.
func (m *TransactionsMutation) SetAmount(f float64) {
	m._Amount = &f
	m.add_Amount = nil
}

// Amount returns the value of the "Amount" field in the mutation.
func (m *TransactionsMutation) Amount() (r float64, exists bool) {
	v := m._Amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "Amount" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "Amount" field.
func (m *TransactionsMutation) AddAmount(f float64) {
	if m.add_Amount != nil {
		*m.add_Amount += f
	} else {
		m.add_Amount = &f
	}
}

// AddedAmount returns the value that was added to the "Amount" field in this mutation.
func (m *TransactionsMutation) AddedAmount() (r float64, exists bool) {
	v := m.add_Amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "Amount" field.
func (m *TransactionsMutation) ClearAmount() {
	m._Amount = nil
	m.add_Amount = nil
	m.clearedFields[transactions.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "Amount" field was cleared in this mutation.
func (m *TransactionsMutation) AmountCleared() bool {
	_, ok := m.clearedFields[transactions.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "Amount" field.
func (m *TransactionsMutation) ResetAmount() {
	m._Amount = nil
	m.add_Amount = nil
	delete(m.clearedFields, transactions.FieldAmount)
}

// SetPackage sets the "Package" field.
func (m *TransactionsMutation) SetPackage(s string) {
	m._Package = &s
}

// Package returns the value of the "Package" field in the mutation.
func (m *TransactionsMutation) Package() (r string, exists bool) {
	v := m._Package
	if v == nil {
		return
	}
	return *v, true
}

// OldPackage returns the old "Package" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldPackage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPackage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPackage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPackage: %w", err)
	}
	return oldValue.Package, nil
}

// ClearPackage clears the value of the "Package" field.
func (m *TransactionsMutation) ClearPackage() {
	m._Package = nil
	m.clearedFields[transactions.FieldPackage] = struct{}{}
}

// PackageCleared returns if the "Package" field was cleared in this mutation.
func (m *TransactionsMutation) PackageCleared() bool {
	_, ok := m.clearedFields[transactions.FieldPackage]
	return ok
}

// ResetPackage resets all changes to the "Package" field.
func (m *TransactionsMutation) ResetPackage() {
	m._Package = nil
	delete(m.clearedFields, transactions.FieldPackage)
}

// SetModule sets the "Module" field.
func (m *TransactionsMutation) SetModule(s string) {
	m._Module = &s
}

// Module returns the value of the "Module" field in the mutation.
func (m *TransactionsMutation) Module() (r string, exists bool) {
	v := m._Module
	if v == nil {
		return
	}
	return *v, true
}

// OldModule returns the old "Module" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldModule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModule: %w", err)
	}
	return oldValue.Module, nil
}

// ClearModule clears the value of the "Module" field.
func (m *TransactionsMutation) ClearModule() {
	m._Module = nil
	m.clearedFields[transactions.FieldModule] = struct{}{}
}

// ModuleCleared returns if the "Module" field was cleared in this mutation.
func (m *TransactionsMutation) ModuleCleared() bool {
	_, ok := m.clearedFields[transactions.FieldModule]
	return ok
}

// ResetModule resets all changes to the "Module" field.
func (m *TransactionsMutation) ResetModule() {
	m._Module = nil
	delete(m.clearedFields, transactions.FieldModule)
}

// SetFunction sets the "Function" field.
func (m *TransactionsMutation) SetFunction(s string) {
	m._Function = &s
}

// Function returns the value of the "Function" field in the mutation.
func (m *TransactionsMutation) Function() (r string, exists bool) {
	v := m._Function
	if v == nil {
		return
	}
	return *v, true
}

// OldFunction returns the old "Function" field's value of the Transactions entity.
// If the Transactions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionsMutation) OldFunction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFunction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFunction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFunction: %w", err)
	}
	return oldValue.Function, nil
}

// ClearFunction clears the value of the "Function" field.
func (m *TransactionsMutation) ClearFunction() {
	m._Function = nil
	m.clearedFields[transactions.FieldFunction] = struct{}{}
}

// FunctionCleared returns if the "Function" field was cleared in this mutation.
func (m *TransactionsMutation) FunctionCleared() bool {
	_, ok := m.clearedFields[transactions.FieldFunction]
	return ok
}

// ResetFunction resets all changes to the "Function" field.
func (m *TransactionsMutation) ResetFunction() {
	m._Function = nil
	delete(m.clearedFields, transactions.FieldFunction)
}

// Where appends a list predicates to the TransactionsMutation builder.
func (m *TransactionsMutation) Where(ps ...predicate.Transactions) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TransactionsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Transactions).
func (m *TransactionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionsMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m._Type != nil {
		fields = append(fields, transactions.FieldType)
	}
	if m._Time != nil {
		fields = append(fields, transactions.FieldTime)
	}
	if m._TransactionID != nil {
		fields = append(fields, transactions.FieldTransactionID)
	}
	if m._Status != nil {
		fields = append(fields, transactions.FieldStatus)
	}
	if m._Sender != nil {
		fields = append(fields, transactions.FieldSender)
	}
	if m._Recipient != nil {
		fields = append(fields, transactions.FieldRecipient)
	}
	if m._Amount != nil {
		fields = append(fields, transactions.FieldAmount)
	}
	if m._Package != nil {
		fields = append(fields, transactions.FieldPackage)
	}
	if m._Module != nil {
		fields = append(fields, transactions.FieldModule)
	}
	if m._Function != nil {
		fields = append(fields, transactions.FieldFunction)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transactions.FieldType:
		return m.GetType()
	case transactions.FieldTime:
		return m.Time()
	case transactions.FieldTransactionID:
		return m.TransactionID()
	case transactions.FieldStatus:
		return m.Status()
	case transactions.FieldSender:
		return m.Sender()
	case transactions.FieldRecipient:
		return m.Recipient()
	case transactions.FieldAmount:
		return m.Amount()
	case transactions.FieldPackage:
		return m.Package()
	case transactions.FieldModule:
		return m.Module()
	case transactions.FieldFunction:
		return m.Function()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transactions.FieldType:
		return m.OldType(ctx)
	case transactions.FieldTime:
		return m.OldTime(ctx)
	case transactions.FieldTransactionID:
		return m.OldTransactionID(ctx)
	case transactions.FieldStatus:
		return m.OldStatus(ctx)
	case transactions.FieldSender:
		return m.OldSender(ctx)
	case transactions.FieldRecipient:
		return m.OldRecipient(ctx)
	case transactions.FieldAmount:
		return m.OldAmount(ctx)
	case transactions.FieldPackage:
		return m.OldPackage(ctx)
	case transactions.FieldModule:
		return m.OldModule(ctx)
	case transactions.FieldFunction:
		return m.OldFunction(ctx)
	}
	return nil, fmt.Errorf("unknown Transactions field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transactions.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case transactions.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case transactions.FieldTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionID(v)
		return nil
	case transactions.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case transactions.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case transactions.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case transactions.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case transactions.FieldPackage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPackage(v)
		return nil
	case transactions.FieldModule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModule(v)
		return nil
	case transactions.FieldFunction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFunction(v)
		return nil
	}
	return fmt.Errorf("unknown Transactions field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionsMutation) AddedFields() []string {
	var fields []string
	if m.add_Amount != nil {
		fields = append(fields, transactions.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transactions.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transactions.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Transactions numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transactions.FieldRecipient) {
		fields = append(fields, transactions.FieldRecipient)
	}
	if m.FieldCleared(transactions.FieldAmount) {
		fields = append(fields, transactions.FieldAmount)
	}
	if m.FieldCleared(transactions.FieldPackage) {
		fields = append(fields, transactions.FieldPackage)
	}
	if m.FieldCleared(transactions.FieldModule) {
		fields = append(fields, transactions.FieldModule)
	}
	if m.FieldCleared(transactions.FieldFunction) {
		fields = append(fields, transactions.FieldFunction)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionsMutation) ClearField(name string) error {
	switch name {
	case transactions.FieldRecipient:
		m.ClearRecipient()
		return nil
	case transactions.FieldAmount:
		m.ClearAmount()
		return nil
	case transactions.FieldPackage:
		m.ClearPackage()
		return nil
	case transactions.FieldModule:
		m.ClearModule()
		return nil
	case transactions.FieldFunction:
		m.ClearFunction()
		return nil
	}
	return fmt.Errorf("unknown Transactions nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionsMutation) ResetField(name string) error {
	switch name {
	case transactions.FieldType:
		m.ResetType()
		return nil
	case transactions.FieldTime:
		m.ResetTime()
		return nil
	case transactions.FieldTransactionID:
		m.ResetTransactionID()
		return nil
	case transactions.FieldStatus:
		m.ResetStatus()
		return nil
	case transactions.FieldSender:
		m.ResetSender()
		return nil
	case transactions.FieldRecipient:
		m.ResetRecipient()
		return nil
	case transactions.FieldAmount:
		m.ResetAmount()
		return nil
	case transactions.FieldPackage:
		m.ResetPackage()
		return nil
	case transactions.FieldModule:
		m.ResetModule()
		return nil
	case transactions.FieldFunction:
		m.ResetFunction()
		return nil
	}
	return fmt.Errorf("unknown Transactions field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Transactions unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Transactions edge %s", name)
}
